[1,["ecpdLyjvZBwrvm+cedCcQy","d4VBhrtEdKnoGo7T9peEOh","09QVpMVS1Lj6KXsz8RHWWs","cfnFTE1F9B0qfoJsSupcyR","48DNcVMWpAiaRNMvg0lhGQ","03+bTFOdlDuocDZQiGYNyY","f0BIwQ8D5Ml7nTNQbh1YlS","60AXYI1adGcLyBc/fa/jd6","1722eade0","e97GVMl6JHh5Ml5qEDdSGa","29FYIk+N1GYaeWH/q1NxQO","f6/DdXt/NP8q9cQ/RiMtyz","26sjwSX7VIYpMABtXFv69Z","6dkeWRTOBGXICfYQ7JUBnG","43L6CczwNM/6GGmCYEQIoH","c2TQ90PE1JzJ8YBhk11ud0","9bvaMerUlDyary99mJa6xp","0ad7LcP61EZppXx6R+jCOe","82migssElAGb04Ws6NimQX","d9uASCGDdEVZipsE88Ukvb","7bG9amERJBq6C+dJ+XHwcZ","e2FCdIot5LjIJh4XoLvnNT","5774v9WqZDrbT6CKallnR4","f5w9W+SzxI9IBp9khPsfvH","baz2WdHlpItre8HOiQYiRg","b9SJl+ZL5KtIoXOXchsnzc","385o92JW9Ku7CbHMhHM/+l","8cVzxFGHVMGbF5Y+5DlSJI","ae37r/2VBIxLDoX0iz0TMu","72lDAOd8xCh6WCd952MigV","d4JFpptCdAnq1DfcSlGWH5","a17y/JnFdBio9pa+2aeg5/","a8vX5xEYBBZJrXtLSxaGD1","d9sencz3tBjZ+Ed/EQ6/nt","faobN8PTRIM7UEn6fLJAtG","78FY4OrH5IT5NeUmlgzAJk","d3FBn2U0BHurx6oVzpRu0P","4ajEuKB3lIHJKNVdDlrGJ5","f5x9GSwxBHcZujlHAmdIew","18XDAVW11LGIUizfCumCWb","bf1lK2U4BPvbc83y+GOYKu","79lwuyx8tEn5WJ2V8PPCSl","d8RfhbETdA/5u6GiZOM7u6","c3cw1afV1OEorQP08rJi77","71VhFCTINJM6/Ky3oX9nBT","1ax86SJX1Av6qKrMl7G8xJ","67/6ieHfNJ4YRLSXu7t1AG","92P7KPlrpNCajCWRWP7fbF","73pHFRkjJBGpf9lzHuoEQs","4bkJ8/c4pKe7+Rk0l3gXbl","3eJE4DqYlD6bwpLeM9QWsi","e4gIJfdQVK14P2nQeuuoUq","ac6Jj+fllI6q3MBOwFnVgH","39Htx5y5RFBJ+w7NR26dVI","63DnDYF/5DiKXk+ajSnfzO","cb2kPoNyFBS5j5GynPaEn6","d5F6TwjN9LPLOnM/Sa8shk","a41rt2GzZGLbpKwZyHOHvQ","14tKt/k3tINYYhUiQ8g1jC","2cMa1/sYNCrb0o2S483Eu1","9eNbHNncxByaWjux0XhsVi","7atdVQVMpExoo1zmNHPTA/","0ertyWgvRKDo654icIv5qo","ffiAT+yFhIDoScZ2S+guZB","41kAM+JbtC4JdfrwbL06G4","af8JtiUk1MjrwuDLCE33FQ","e09Sq54AtFZLnxf1PZ+0py","a62VRHoclJzJu0UrBtT7Id","e1eUJSEptFtp9hUUvxXqDx","e72MhOZkpLnoANii1PVf1b","c1U6d2Q2VFMJ+oJkfLGO/G","21YAdTLxhDWKW5r2jPeoSw","17Zvcw2+lPqYCtvu1hsopZ","28Etu127ZJ9Kkd5SK2W6EY","d0yZ0fK2ZP2Zg1P9iMs7Ak","b3FLUhqDhF5KOA1equvAI6","adrhsHOUFA7qlDLJ1l/SGN","cfJTVH3BVAx6kMEOAT3iau","0fWb0rOtVEPYAAhrLWZVeK","8cxXkC0hZNQ7tT74CHBaeQ","4cY4LPM+FHq4HDSJq+azyo","ecDofqO4RMBZ/TiozdKzVz","5cjMbhtX5E7ItNjpoG7Lpg","da5VYDd4FBZoedjBQWq6tM","1246ebxBNAI5+CAu0/ywY5","5ftPl7wyJI6KXv5PHWNoyB","fftZ6TVQVPjrFLSttahbHn","d6ZYn5JP9EPbdKuUfA8H78","a3pem9jMRJM7yd7jxCr5/t","54lQ8oHIdN3bAAo/PyK05T","1ek7cZJT1AH5izM+hYCzJ0","c4SEPhK6BFuI2zY35KSw7r","5ejZgz5ktAQZWPJ+2Kpmpm","abP9M1C8FCjYx9SbpsV4VI","73GL1rKD1DDZGSCwm1t0st","d0tn++Tg9ClqvTtbZSP0CI","223OS9GCFBUofu6E9YvcHP","f45VPBCAxLRrSOk4fOo98T","f3ZMzktAJCcLZAHkI8AAsJ","07IwtSZUFHIoi2t2dPV9uG","8awQ2XLr1ANomggyxdN4Fm","c88wHFQzRE2q9j6+IPXTGk","81yOAn3rhI0btyPuWoH3Fa","577yA8/LtKSaxJ6f1bMedU","d8HsitJHxOYqo801xBk8ev","4dHcYIko5NRpBgGfsEV2QV","61y7Dl7etNGoDMgwCIS8X3","6aumoPPFVP3brPOvk8/yXL","d3o6yc6LlG6qR1urLKbRg9","d2kwnHjthM+rAVvZteU1ho","06ZUAVg0VA750tbbzLsMA9","708r+xB2xAbJEkKcAggjqr","8f3rXfN49D14JV1xE/RD9d","5aMTm/ZhVL97zi3BQf75TP","e7JJ1cuE1LBpRQ+bXmgSQ9","5aWlrQvSZCb7xOJLHnDt/a","6bhWdj7j5O07WExioZNeNq","c40xxNsTVEPbGm/EGXJ8f2","8f/iqR4blHioJwxx1rP1vG","fcGbFMdkBFfIFlAL18oBqc","6d2omi12ZHcqslwaIn3uqq","6eC9sm3nBK1Y/PyKbUrak5","66gD5Y+B1Dqr0MNlszE9uX","42s1mh14tCt5+O83KB5BUo","75fclwTG1GHqHXxtKJxL6N","26O3Jit5ND8Z+b+gA/S7Cu","b4P/PCArtIdIH38t6mlw8Y","e8Ueib+qJEhL6mXAHdnwbi","abwstieFJFJakN1HRIe4jy","838jckgG1GAaVtMamdQHT4","18OGTeFVNM8qUQlztT7+wk"],["node","_spriteFrame","_N$file","_textureSetter","_mesh","_parent","_effectAsset","root","_N$pressedSprite","_N$hoverSprite","_N$disabledSprite","diffuseTexture","_N$normalSprite","_N$target","chNode","playerSuccessMaterial","data","apiController","mainTexture","scoreController","gameController","fbInstantGameController","leaderboardLayout","gameCamera","player","playerCamera","effectController","loadingLayout","headphoneInstructionNode","settingsLayout","settingsButtonNode","leaderBoardButtonNode","playWithFriendsButtonNode","playButtonNode","gameLogo","mainMenuLayout","envController","gameOverUIPosition","gameOverUIBestScore","gameOverUIScore","continueButton","shareButton","gameOverLayout","blackLayoutNode","appreciationText","opponentScoreText","opponentPic","appreciationNode","timerTextLabel","gameInstructionLayout","scoreLabel","bestScoreText","soundToggle","musicToggle","obstacleController","touchInput","playerTrail","playerMesh","explosionNode","playerScreen","environmentController","starParticle","birdFlockParticle","explosionParticle","rainParticle","windParticle","obstacleParentNode","scene","checkMark","bgAudioClip","scoreAudioClip","buttonClickAudioClip","windSoundClip","rainSoundClip","_defaultClip","_normalMaterial","backgroundMaterial","_N$font"],[["cc.Node",["_name","_groupIndex","_is3DNode","_active","_objFlags","_id","_opacity","_components","_parent","_trs","_contentSize","_children","_prefab","_color","_eulerAngles","_anchorPoint"],-4,9,1,7,5,2,4,5,5,5],"cc.SpriteFrame",["cc.Node",["_name","_groupIndex","_is3DNode","_objFlags","_opacity","_active","_parent","_components","_trs","_contentSize","_children","_eulerAngles","_color","_prefab"],-3,1,2,7,5,2,5,5,4],["cc.Label",["_string","_N$verticalAlign","_fontSize","_lineHeight","_N$horizontalAlign","_N$overflow","_isSystemFontUsed","_N$cacheMode","_enableWrapText","node","_materials","_N$file"],-6,1,3,6],["cc.Sprite",["_sizeMode","_type","_enabled","_isTrimmedMode","node","_materials","_spriteFrame"],-1,1,3,6],["cc.CurveRange",["mode","constantMax","constantMin","multiplier","constant","curve"],-2,4],["cc.Button",["_N$transition","node","clickEvents","_N$pressedColor","_N$disabledColor","_N$target","_N$pressedSprite","_N$hoverSprite","_N$disabledSprite","_N$normalColor","_N$normalSprite","_normalMaterial","_N$hoverColor"],2,1,9,5,5,1,6,6,6,5,6,6,5],["cc.ParticleSystem3D",["_simulationSpace","scaleSpace","duration","playOnAwake","simulationSpeed","_capacity","loop","_renderMode","_lengthScale","_materials","startDelay","startLifetime","startColor","startSize","startSpeed","startRotation","gravityModifier","rateOverTime","rateOverDistance","_shapeModule","node","bursts","_sizeOvertimeModule","_limitVelocityOvertimeModule","_textureAnimationModule"],-6,3,4,4,4,4,4,4,4,4,4,4,1,9,4,4,4],["882aeog/g1Flb8yamVgcyBN",["animationIndex","xPosToTween","yPosToTween","node"],0,1],["cc.GradientRange",["_mode","colorMax","color","colorMin"],2,5,5,5],["cc.ShapeModule",["enable","_shapeType","randomDirectionAmount","alignToDirection","radiusThickness","arcSpread","sphericalDirectionAmount","_angle","randomPositionAmount","arcSpeed","_scale","_rotation","_position"],-6,4,5,5,5],["cc.Keyframe",["value","time","inTangent","outTangent"],-1],["cc.Material",["_name","_techniqueIndex","_techniqueData"],1,11],["cc.BoxCollider3D",["_isTrigger","_enabled","node","_center","_size"],1,1,5,5],["cc.Camera",["_cullingMask","_clearFlags","_depth","_farClip","_ortho","_alignWithScreen","_zoomRatio","_fov","node","_backgroundColor"],-5,1,5],["cc.BufferRange",["length","offset"],1],["cc.PrefabInfo",["fileId","root"],2,1],["77abeRBpUNHvrxJQtwO4UXT",["playerScored","node","chNode","playerSuccessMaterial"],2,1,1,6],["cc.Layout",["_resize","_N$layoutType","_N$spacingY","node","_layoutSize"],0,1,5],["cc.Animation",["playOnLoad","node","_clips","_defaultClip"],2,1,3,6],["cc.MeshRenderer",["node","_materials","_mesh"],3,1,3,6],["cc.Mask",["_N$alphaThreshold","_type","node","_materials"],1,1,3],["cc.Light",["_shadowMaxDepth","_shadowFrustumSize","_intensity","_type","_range","node","_color"],-2,1,5],["cc.Toggle",["_N$transition","duration","node","_N$normalColor","_N$target","checkMark"],1,1,5,1,1],["cc.Prefab",["_name","optimizationPolicy"],1],["cc.Mesh",["_native","_vertexBundles","_primitives","_minPos","_maxPos"],2,9,9,5,5],["cc.mesh.VertexBundle",["verticesCount","data","formats"],2,4,9],["cc.mesh.VertexFormat",["name","type","num"],0],["cc.mesh.Primitive",["vertexBundleIndices","data"],2,4],["cc.AnimationClip",["_name","_duration","speed","wrapMode","curveData"],-2],["cc.AudioClip",["_name","_native","duration"],0],["cc.SceneAsset",["_name","asyncLoadAssets"],1],["cc.Node",["_name","_is3DNode","_id","_parent","_components","_trs","_eulerAngles"],0,1,12,7,5],["cc.Scene",["_name","_children","_anchorPoint","_trs"],2,12,5,7],["694e3hlMqhEFaSzyDXh7570",["node","mainMenuLayout","gameCamera","gameLogo","playButtonNode","playWithFriendsButtonNode","leaderBoardButtonNode","settingsButtonNode","gameController","leaderboardLayout","settingsLayout","scoreController","headphoneInstructionNode","loadingLayout","apiController"],3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],["288d18SomRMuJaEI+tzg1p1",["node","blackLayoutNode","gameOverLayout","shareButton","continueButton","fbInstantGameController","gameController","gameOverUIScore","gameOverUIBestScore","gameOverUIPosition","scoreController","envController","apiController"],3,1,1,1,1,1,1,1,1,1,1,1,1,1],["73394ol6ZxMI56RimKkxviF",["node","scoreLabel","gameInstructionLayout","timerTextLabel","gameController","player","appreciationNode","opponentPic","opponentScoreText","appreciationText"],3,1,1,1,1,1,1,1,1,1,1],["fc74bsi2VZKdqFocPB4Tg6Y",["node","leaderboardLayout","scoreItems","bestScoreText","apiController"],3,1,1,2,1,1],["9e7dfQi5u9PM5mJtAnoPcM2",["node","musicToggle","soundToggle","bgAudioClip","scoreAudioClip","buttonClickAudioClip","windSoundClip","rainSoundClip"],3,1,1,1,6,6,6,6,6],["c4447JE2URKXp0Sit7VIBlT",["debugMode","rewardedAdID","interstitialAdID","node","player","audioController","fbInstantGameController","uiController","obstacleController","gameCamera","apiController"],0,1,1,1,1,1,1,1,1],["cc.Canvas",["node","_designResolution"],3,1,5],["183e4shLZZJY7VW5SjxnI3s",["node","playerScreen","gameController","explosionNode","playerMesh","playerTrail","audioController","effectController","touchInput","playerCamera"],3,1,1,1,1,1,1,1,1,1,1],["cc.RigidBody3D",["_mass","_angularDamping","_useGravity","node","_linearFactor"],0,1,5],["63971YMiVVJxLPHCXF2E2mn",["node","player","offset","gameController","uiController"],3,1,1,5,1,1],["61254gPs7dEy4R/aq+ZAiL1",["node","gameController","environmentController","gameCamera"],3,1,1,1,1],["23896xmugJLA4AgiWrXNAim",["encryptionKey","node","fbInstantGameController","scoreController","gameController"],2,1,1,1,1],["cc.ClickEvent",["_componentId","handler","target"],1,1],["43ed1ndtNFNnJWbKYnyJq/P",["node"],3,1],["2d4d8djlaFH5Koa1Pud9z3G",["contextLeaderboardName","node","uiController","fbInstantGameController","gameCamera","apiController","gameController"],2,1,1,1,1,1,1],["2ac1f88AY5JmobvL7uqQXIF",["node","player","gameController","gameCamera","instructionGameLayout"],3,1,1,1,1,1],["7fb90rQ1v5IJZDw1SgHK/E9",["dayNightTransitionSpeed","node","cloudNodes","gameController","mountainsNodes","sunNode","moonNode","audioController","colors","shadeColors","effectController","playerCamera","backgroundMaterial"],2,1,2,1,2,1,1,1,12,12,1,1,6],["cc.ParticleSystem3D",["duration","_capacity","_simulationSpace","simulationSpeed","scaleSpace","_renderMode","_lengthScale","node","_materials","startDelay","startLifetime","startColor","startSize","startSpeed","startRotation","gravityModifier","rateOverTime","rateOverDistance"],-4,1,12,4,4,4,4,4,4,4,4,4],["0bf3aBV959EfYd4vT+vWmF+",["node","windParticle","rainParticle","explosionParticle","birdFlockParticle","starParticle"],3,1,1,1,1,1,1],["cc.BlockInputEvents",["node"],3,1],["cc.ScrollView",["horizontal","brake","bounceDuration","_N$horizontalScrollBar","_N$verticalScrollBar","node","_N$content"],-2,1,1],["1c7d86MwX5OoJ8/UHxVLyNV",["node","environmentController","playerController"],3,1,1,1],["b0736d5/nhNabYLaQ6BHDUt",["node","gameController","obstacles","obstacleParentNode"],3,1,1,3,1],["cc.Burst",["_time","minCount","maxCount","count"],0,4],["cc.SizeOvertimeModule",["enable","size","x","y","z"],2,4,4,4,4],["cc.AnimationCurve",["preWrapMode","postWrapMode","keyFrames"],1,9],["cc.AnimationCurve",["preWrapMode","postWrapMode","keyFrames"],1,2],["cc.LimitVelocityOvertimeModule",["enable","space","dampen","limit","limitX","limitY","limitZ"],0,4,4,4,4],["cc.TextureAnimationModule",["_enable","_numTilesX","_numTilesY","cycleCount","frameOverTime","startFrame"],-1,4,4],["cc.RichText",["_isSystemFontUsed","_N$string","_N$horizontalAlign","_N$fontSize","_N$cacheMode","_N$maxWidth","_N$lineHeight","node"],-4,1],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.TTFFont",["_name","_native"],1]],[[16,0,1,2],[0,0,1,8,7,10,9,3],[5,1],[27,0,1,2,4],[4,0,4,5,6,2],[20,0,1,2,1],[5,4,2],[13,2,3,4,1],[0,0,2,1,8,7,12,9,4],[46,0,1,2,3],[0,0,1,8,11,7,10,9,3],[4,1,0,4,5,6,3],[25,0,1,2,3,4,2],[26,0,1,2,2],[15,0,2],[15,1,0,3],[28,0,1,2],[0,0,2,8,7,12,3],[0,0,3,1,8,7,10,9,4],[16,1,1],[3,0,2,3,6,4,1,5,9,10,11,8],[21,1,0,2,3,3],[12,0,2,2],[0,0,4,3,1,8,11,7,10,15,9,5],[0,0,1,8,11,9,3],[0,0,1,8,11,10,9,3],[3,0,2,3,6,1,5,7,9,10,11,8],[3,0,2,3,6,4,1,5,7,9,10,11,9],[0,0,2,1,8,7,12,4],[3,0,2,3,6,4,1,9,10,11,7],[0,0,5,8,3],[5,0,2,1,4],[0,0,8,7,2],[13,0,2,3,4,2],[8,0,3,2],[6,0,1,2,9,3,4,5,10,6,7,8,2],[30,0,1,2,4],[0,0,3,1,8,11,7,10,9,4],[4,4,5,6,1],[3,0,2,3,6,4,1,5,9,10,8],[0,0,2,1,11,7,12,9,4],[0,0,5,8,11,3],[0,0,8,7,10,9,2],[0,0,4,8,7,13,10,3],[0,0,2,1,8,7,12,9,14,4],[0,0,2,8,7,12,9,14,3],[13,1,2,3,4,2],[17,0,1,2,3,2],[9,1],[24,0,2],[0,0,7,2],[0,0,6,8,11,7,10,9,3],[0,0,4,3,1,8,7,13,10,5],[0,0,1,8,7,10,15,3],[3,0,2,8,4,1,5,7,9,10,8],[8,0,2,3,3],[12,0,1,2,3],[0,0,2,1,8,11,12,9,4],[0,0,2,1,8,7,9,14,4],[0,0,4,1,8,7,10,9,4],[0,0,4,1,8,7,13,10,4],[0,0,3,1,8,7,13,10,9,4],[0,0,8,11,9,2],[0,0,8,7,10,2],[0,0,4,3,8,7,13,10,4],[0,0,2,11,7,12,9,3],[2,0,1,6,10,7,9,8,3],[2,0,2,6,7,13,8,11,3],[2,0,3,1,6,7,9,4],[2,0,2,1,6,7,8,4],[2,0,5,1,6,7,12,9,8,4],[2,0,6,7,9,8,2],[2,0,1,6,7,9,8,3],[17,1,2,3,1],[4,2,1,0,4,5,6,4],[4,0,3,4,5,3],[3,0,2,3,6,4,1,9,10,7],[3,0,3,8,4,1,5,7,9,10,8],[51,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,8],[5,0,1,3],[5,0,2,1,3,5],[5,0,5,2],[9,2,1],[53,0,1],[10,0,1,3,9,11,10,4],[10,0,1,9,11,10,3],[60,0,1,2,3],[64,0,1,2,4],[65,0,1,3],[12,2,1],[29,0,1,2,3,4,6],[31,0,1,3],[0,0,3,2,1,11,12,9,5],[0,0,1,5,8,11,7,10,9,4],[0,0,2,5,8,11,7,12,9,14,4],[0,0,4,1,11,7,10,15,9,4],[0,0,2,1,8,11,7,12,9,4],[0,0,1,8,11,7,10,15,3],[0,0,3,2,1,8,11,12,9,5],[0,0,1,11,7,10,15,9,3],[0,0,11,7,9,2],[0,0,3,1,8,11,7,10,4],[0,0,6,1,8,11,7,10,9,4],[0,0,3,2,5,8,11,7,9,14,5],[0,0,3,6,1,8,7,13,10,5],[0,0,4,1,11,7,10,4],[0,0,3,8,11,9,3],[0,0,4,1,11,7,13,10,4],[0,0,8,11,7,10,9,2],[0,0,4,1,8,11,7,13,10,4],[0,0,4,11,7,13,10,3],[0,0,4,8,11,7,10,3],[0,0,4,8,11,7,13,10,3],[0,0,4,1,8,11,7,10,4],[0,0,8,11,7,10,2],[0,0,3,6,1,8,7,13,10,9,5],[0,0,3,8,11,7,10,9,3],[0,0,2,5,8,7,9,14,4],[0,0,2,5,8,7,4],[0,0,1,8,7,9,3],[0,0,2,8,7,9,3],[0,0,3,2,1,8,7,9,5],[0,0,3,8,7,10,9,3],[0,0,6,2,5,8,7,9,5],[0,0,5,8,7,10,3],[32,0,1,2,3,4,5,6,4],[2,0,1,6,10,7,9,3],[2,0,2,6,7,8,3],[2,0,2,1,6,7,8,11,4],[2,0,4,1,6,7,9,8,4],[2,0,1,6,7,12,9,8,3],[33,0,1,2,3,2],[34,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,1],[35,0,1,2,3,4,5,6,7,8,9,10,11,12,1],[36,0,1,2,3,4,5,6,7,8,9,1],[37,0,1,2,3,4,1],[38,0,1,2,3,4,5,6,7,1],[39,0,1,2,3,4,5,6,7,8,9,10,4],[40,0,1,1],[41,0,1,2,3,4,5,6,7,8,9,1],[42,0,1,2,3,4,4],[18,0,1,2,3,4,4],[18,0,3,4,2],[4,1,4,5,6,2],[4,2,1,0,4,5,4],[4,0,4,5,2],[43,0,1,2,3,4,1],[44,0,1,2,3,1],[45,0,1,2,3,4,2],[3,0,2,3,8,4,1,5,7,9,10,9],[3,9,10,1],[19,0,1,2,3,2],[19,1,1],[8,0,1,2,3,4],[8,3,1],[8,0,1,3,3],[6,1,2,9,3,4,5,10,6,7,8,1],[6,0,1,2,9,3,4,5,11,10,6,7,8,2],[6,0,1,2,3,4,5,6,7,8,2],[6,0,1,2,9,3,4,5,6,7,8,2],[6,0,1,2,3,12,4,5,10,6,7,8,2],[47,0,1],[48,0,1,2,3,4,5,6,2],[49,0,1,2,3,4,1],[50,0,1,2,3,4,5,6,7,8,9,10,11,12,2],[7,2,6,3,0,4,1,20,9,10,11,12,13,14,15,16,17,18,21,19,22,23,7],[7,2,5,3,0,4,1,9,10,11,12,13,14,15,16,17,18,19,7],[7,2,5,0,1,20,9,10,11,12,13,14,15,16,17,18,19,5],[7,5,3,0,4,1,7,8,20,9,10,11,12,13,14,15,16,17,18,19,8],[7,2,0,1,20,9,10,11,12,13,14,15,16,17,18,19,4],[7,2,5,6,3,0,4,1,9,10,11,12,13,14,15,16,17,18,19,24,8],[5,0,3,5,3],[9,0,1,2],[9,0,3,1,2],[52,0,1,2,3,4,5,1],[54,0,1,2,3,4,5,6,6],[20,0,1,1],[55,0,1,2,1],[21,0,2,3,2],[56,0,1,2,3,1],[22,2,0,1,5,4],[22,3,4,0,1,5,6,5],[14,0,8,9,2],[14,0,1,2,6,3,4,5,8,9,8],[14,0,1,2,7,3,4,5,8,8],[57,0,1,2,3,4],[10,0,1,4,5,2,6,9,10,7],[10,0,7,3,2,8,9,12,11,10,6],[58,0,1,2,3,4,2],[59,0,1,2,3],[11,0,2],[11,1,2],[11,2,3,3],[11,1,0,2,3,5],[61,0,1,2,3,4,5,6,4],[23,0,2,3,4,2],[23,1,0,2,3,4,5,3],[62,0,1,2,3,4,5,5],[63,0,1,2,3,4,5,6,7,8],[24,0,1,3]],[[[{"name":"01","rect":[906,521,512,111],"offset":[0,0.5],"originalSize":[512,128],"rotated":1,"capInsets":[0,0,0,0]}],[1],0,[0],[3],[8]],[[[22,"starMaterial",[{},"0",11,[{"defines":{"USE_DIFFUSE_TEXTURE":true}},"props",11,[{},"diffuseTexture",6,0]]]]],0,0,[0,0],[11,6],[37,13]],[[{"name":"FixedHome","rect":[0,0,512,512],"offset":[0,0],"originalSize":[512,512],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[38]],[[{"name":"Second","rect":[521,521,512,379],"offset":[0,0.5],"originalSize":[512,512],"rotated":1,"capInsets":[0,0,0,0]}],[1],0,[0],[3],[8]],[[{"name":"settingsButtonPressed","rect":[4,4,504,508],"offset":[0,-2],"originalSize":[512,512],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[39]],[[[12,".bin",[[13,482,[14,15424],[[3,"a_normal",5126,3],[3,"a_position",5126,3],[3,"a_uv0",5126,2]]]],[[16,[0],[15,15424,5760]]],[1,-0.0829754844307899,-0.0827737301588058,-0.00676308199763298],[1,0.0829178988933563,0.0831196084618568,0.00676308758556843]],-1],0,0,[],[],[]],[[[56,"birdFlockParticleMaterial",3,[{},"0",11,[{"defines":{}},"props",11,[{},"mainTexture",6,0]]]]],0,0,[0,0],[18,6],[40,18]],[[{"name":"playWithFriendsSpriteHover","rect":[0,0,512,512],"offset":[0,0],"originalSize":[512,512],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[41]],[[[12,".bin",[[13,65,[14,2080],[[3,"a_normal",5126,3],[3,"a_position",5126,3],[3,"a_uv0",5126,2]]]],[[16,[0],[15,2080,576]]],[1,-0.0154485637322068,-0.0027187520172447,-0.0154485637322068],[1,0.0154485637322068,0.00271875155158341,0.0154485637322068]],-1],0,0,[],[],[]],[[[12,".bin",[[13,63,[14,1512],[[3,"a_normal",5126,3],[3,"a_position",5126,3]]]],[[16,[0],[15,1512,150]]],[1,-0.00478453794494271,-0.00288628577254713,-0.00668712798506021],[1,0.00457590259611607,0.000773884996306151,0.0103553216904402]],-1],0,0,[],[],[]],[[{"name":"playWithFriendsSpritePressed","rect":[0,0,512,512],"offset":[0,0],"originalSize":[512,512],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[42]],[[[12,".bin",[[13,52,[14,1664],[[3,"a_normal",5126,3],[3,"a_position",5126,3],[3,"a_uv0",5126,2]]]],[[16,[0],[15,1664,432]]],[1,-0.0185156222432852,-0.00271974178031087,-0.0106900008395314],[1,0.0185156241059303,0.00271973991766572,0.0213799998164177]],-1],0,0,[],[],[]],[[[22,"planeMat",[{},"0",11,[{"defines":{"USE_DIFFUSE_TEXTURE":true,"USE_ALPHA_TEST":false}},"props",11,[{},"diffuseColor",8,[4,4294967295],"diffuseTexture",6,0]]]]],0,0,[0,0],[11,6],[25,15]],[[{"name":"playWithFriendsGreyscale","rect":[0,0,512,512],"offset":[0,0],"originalSize":[512,512],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[43]],[[{"name":"default_btn_disabled","rect":[0,0,40,40],"offset":[0,0],"originalSize":[40,40],"capInsets":[12,12,12,12]}],[1],0,[0],[3],[44]],[[{"name":"Tap","rect":[18,4,65,91],"offset":[0.5,0.5],"originalSize":[100,100],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[45]],[[[90,"loading",0.3333333333333333,0.35,2,{"paths":{"Dot-1":{"props":{"active":[{"frame":0,"value":false},{"frame":0.08333333333333333,"value":true},{"frame":0.3333333333333333,"value":false}]}},"Dot-2":{"props":{"active":[{"frame":0,"value":false},{"frame":0.16666666666666666,"value":true},{"frame":0.3333333333333333,"value":false}]}},"Dot-3":{"props":{"active":[{"frame":0,"value":false},{"frame":0.25,"value":true},{"frame":0.3333333333333333,"value":false}]}}}}]],0,0,[],[],[]],[[[36,"soft_beep",".mp3",1.77225],-1],0,0,[],[],[]],[[[91,"GameScene",null],[92,"Star",false,true,4,[-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16],[19,-1],[-372.324,144.749,205.931,0,0,0,1,0.8,0.8,0.8]],[131,"New Node",[[-17,-18,[30,"--------------------------------","0eGEEquNJFF4DpqZu7XJZq",-19],-20,[30,"--------------------------------","fc/4czMdFNWp2kllnQc7r3",-21],-22,-23,[30,"--------------------------------","011+tW+NJDdLJ4wRcR/jEi",-24],-25,[30,"--------------------------------","78SPGsFz5LGoFmG+l2ZrKo",-26],-27,-28,[30,"--------------------------------","5bNaIKFkpLc5YCQaD2TSuM",-29],-30,[30,"--------------------------------","3fCWfq9thAqbE626fMPkzD",-31],-32,[30,"--------------------------------","b9CWDcpVJGgYQIfFCvX0ND",-33],-34,-35],1,1,4,1,4,1,1,4,1,4,1,1,4,1,4,1,4,1,1],[0,0,0],[0,0,0,0,0,0,1,1,1,1]],[50,"UIController",[[132,-50,-49,-48,-47,-46,-45,-44,-43,-42,-41,-40,-39,-38,-37,-36],[133,-63,-62,-61,-60,-59,-58,-57,-56,-55,-54,-53,-52,-51],[134,-73,-72,-71,-70,-69,-68,-67,-66,-65,-64],[135,-87,-86,[-76,-77,-78,-79,-80,-81,-82,-83,-84,-85],-75,-74]]],[50,"AudioController",[[136,-90,-89,-88,29,30,31,32,33]]],[50,"GameController",[[137,false,"1208935619548327_1220247771750445","1208935619548327_1220247608417128",-96,-95,4,-94,3,-93,-92,-91]]],[93,"MainCanvas",3,"acFR2uE5REW4tOEjUulBxH",2,[-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-108,-109],[[138,-97,[5,1080,1920]]],[5,1080,1920],[540,960,0,0,0,0,1,1,1,1]],[94,"Player",true,"1cKRdjdIRHBLXGYh7YVoT6",2,[-121,-122],[[7,-111,[1,-0.02,0,0.07],[1,0.174,0.84,0.263]],[139,-119,-118,5,-117,-116,-115,4,-114,-113,-112],[140,2.7,0,false,-120,[1,1,7,1]]],[19,-110],[0,0,-70,0.7071067811865475,0,0,0.7071067811865477,6.019,4.213,6.019],[1,89.99999999999999,0,0]],[40,"Obstacle2",true,2,[-127,-128,-129,-130,-131],[[33,true,-124,[1,0,0,0.3],[1,2.5,2.5,0.1]],[47,false,-126,-125,304]],[19,-123],[0,0,63.529,0,0,0,1,6,6,6]],[95,"content",512,3,[-133,-134,-135,-136,-137,-138,-139,-140,-141,-142],[[141,1,2,5,-132,[5,220,-5]]],[5,220,-5],[0,0.5,1],[0,115.30999755859375,0,0,0,0,1,1,1,1]],[37,"GameOverLayout",false,3,6,[-144,-145,-146,-147,-148,-149,-150,-151],[[143,1,-143,[254],255]],[5,766,1024],[0,175,0,0,0,0,1,1,1,1]],[41,"Controllers","3eFM47KaVNL63cgc7IW462",2,[5,-152,4,-153,-154,-155,-156,3,-157]],[41,"Environment","c1Kxq+i95PWbip9yjhxQo7",2,[-158,-159,-160,-161,1,-162,-163,-164]],[125,"Main 3D Camera",true,"84AmNkLnVF9LNluyjCgGey",2,[[-165,[146,-166,7,[1,-10,260,-953],5,3]],1,4],[-90,30,-50,-0.07063568782943642,-0.8532438446818503,-0.11991560213626488,0.5025990345013547,1,1,1],[1,-16,-119,0]],[37,"LeaderboardLayout",false,3,6,[-168,-169,-170,-171,-172],[[11,1,0,-167,[193],194]],[5,1080,1920],[0,0,0,0,0,0,1,1,1,1.503]],[96,"Mountain",true,4,12,[-176,-177],[[147,-175,5,-174,13]],[19,-173],[-341.64,-45.648,205.942,0,0,0,1,5,7,5]],[97,"MainMenuLayout",3,6,[-179,-180,-181,-182,-183],[[142,1,-178,[5,819.2,1797]]],[5,819.2,1797],[0,0.49,0.5]],[37,"SettingsLayout",false,3,6,[-185,-186,-187,-188,-189],[[11,1,0,-184,[24],25]],[5,766,1024],[0,175,0,0,0,0,1,1,1,1]],[32,"APIController",11,[[148,"Alienide_2021@PP",-192,-191,-190,5]]],[57,"Sun",true,4,12,[-194,-195],[19,-193],[-380,100,160.794,0,0,0,1,5,5,5]],[98,"Moon",false,true,4,12,[-197,-198],[19,-196],[-380,-60,160.794,0,0,0,1,3.5,3.5,3.5]],[37,"InstructionLayout",false,3,6,[-200,-201],[[144,false,1,0,-199,[43]]],[5,3840,2160],[0,0,0,0,0,0,1,1,1,1.083]],[23,"1",512,false,3,9,[-203,-204,-205],[[4,0,-202,[71],72]],[5,220,42.625],[0,0,1],[-102.19999694824219,0,0,0,0,0,1,1,1,1]],[23,"2",512,false,3,9,[-207,-208,-209],[[4,0,-206,[84],85]],[5,220,42.625],[0,0,1],[-102.19999694824219,-47.625,0,0,0,0,1,1,1,1]],[23,"3",512,false,3,9,[-211,-212,-213],[[4,0,-210,[97],98]],[5,220,42.625],[0,0,1],[-102.19999694824219,-95.25,0,0,0,0,1,1,1,1]],[23,"4",512,false,3,9,[-215,-216,-217],[[4,0,-214,[110],111]],[5,220,42.625],[0,0,1],[-102.19999694824219,-142.875,0,0,0,0,1,1,1,1]],[23,"5",512,false,3,9,[-219,-220,-221],[[4,0,-218,[123],124]],[5,220,42.625],[0,0,1],[-102.19999694824219,-190.5,0,0,0,0,1,1,1,1]],[23,"6",512,false,3,9,[-223,-224,-225],[[4,0,-222,[136],137]],[5,220,42.625],[0,0,1],[-102.19999694824219,-238.125,0,0,0,0,1,1,1,1]],[23,"7",512,false,3,9,[-227,-228,-229],[[4,0,-226,[149],150]],[5,220,42.625],[0,0,1],[-102.19999694824219,-285.75,0,0,0,0,1,1,1,1]],[23,"8",512,false,3,9,[-231,-232,-233],[[4,0,-230,[162],163]],[5,220,42.625],[0,0,1],[-102.19999694824219,-333.375,0,0,0,0,1,1,1,1]],[23,"9",512,false,3,9,[-235,-236,-237],[[4,0,-234,[175],176]],[5,220,42.625],[0,0,1],[-102.19999694824219,-381,0,0,0,0,1,1,1,1]],[23,"10",512,false,3,9,[-239,-240,-241],[[4,0,-238,[188],189]],[5,220,42.625],[0,0,1],[-102.19999694824219,-428.625,0,0,0,0,1,1,1,1]],[99,"LoadingLabel",3,[-244,-245,-246],[[29,"Loading",120,100,false,1,1,-242,[203],204],[151,true,-243,[206],205]],[5,588.69,126],[0,0.7554052598491285,0.5415556933851123],[83.983,9.874,0,0,0,0,1,1,1,1]],[100,"OpponentImageHolder",[-248,-249,-250,-251],[[153,14,1350,0,-247]],[1350,0,0,0,0,0,1,1,1,1]],[37,"Continue Button",false,3,10,[-256],[[156,-253,[[9,"288d18SomRMuJaEI+tzg1p1","continueButtonFunc",3],[9,"9e7dfQi5u9PM5mJtAnoPcM2","buttonClickSoundEffect",4]],[4,4293322470],[4,4291348680],[4,3363338360],-252,243,244,245,246],[34,11,-254],[34,12,-255]],[5,480,160],[0,-720,0,0,0,0,1,1,1,1.015]],[51,"Leaderboard Button",40,16,[-260,-261],[[157,2,-258,[[9,"694e3hlMqhEFaSzyDXh7570","showLeaderboardButton",3],[9,"9e7dfQi5u9PM5mJtAnoPcM2","buttonClickSoundEffect",4]],[4,4293322470],[4,4291348680],[4,4280821802],-257,274,275,276,277,278],[55,3,-786.241,-259]],[5,200,200],[0,-811,0,0,0,0,1,0.952,0.952,0.952]],[51,"Settings Button",40,16,[-266],[[35,2,-263,[[9,"694e3hlMqhEFaSzyDXh7570","settingsButton",3],[9,"9e7dfQi5u9PM5mJtAnoPcM2","buttonClickSoundEffect",4]],[4,4293322470],[4,4291348680],[4,3363338360],-262,282,283,284,285],[55,3,-788.807,-264],[34,1,-265]],[5,200,200],[262,-811,0,0,0,0,1,0.938,0.938,0.938]],[32,"FBInstantGameController",11,[[161,-267]]],[32,"ScoreController",11,[[162,"Highscores",-268,3,37,13,18,5]]],[1,"TouchInputLayout",3,6,[[74,false,1,0,-269,[6],7],[163,-270,7,5,13,21]],[5,3840,2160],[0,0,0,0,0,0,1,1,1,5.794]],[41,"Particle Effects","08jq8LhA9DlLd+IzYq+3hi",2,[-271,-272,-273,-274]],[101,"LoadingLayout",false,3,6,[-276,32],[[152,-275]],[5,2573.5,1920]],[102,"Play Solo Button",12,3,16,[-280],[[158,1,-278,[[9,"694e3hlMqhEFaSzyDXh7570","playButton",3],[9,"9e7dfQi5u9PM5mJtAnoPcM2","buttonClickSoundEffect",4]],[4,4291348680],[4,3363338360],-277,261,262,263],[154,-279]],[5,230,230],[0,-9.81,0,0,0,0,1,1,1,2.758]],[51,"Play With Friends Button",40,16,[-284],[[35,2,-282,[[9,"694e3hlMqhEFaSzyDXh7570","playWithFriendsButton",3],[9,"9e7dfQi5u9PM5mJtAnoPcM2","buttonClickSoundEffect",4]],[4,4293322470],[4,4289177519],[4,3363338360],-281,266,267,268,269],[55,3,-780.528,-283]],[5,100,100],[-262,-811,0,0,0,0,1,1.881,1.881,1.881]],[32,"EnvironmentController",11,[[164,0.6,-288,[-287],5,[15],19,20,4,[[[4,4291930954],[4,4292250208],[4,4286036078],[4,4284450668],[4,4278190080]],8,8,8,8,8],[[[4,4289265663],[4,4279876351],[4,4278215423],[4,4278203018],[4,4281866496]],8,8,8,8,8],-286,-285,296]]],[57,"Mountain static",true,4,12,[-290],[19,-289],[-365,-64.559,166.825,0,0,0,1,2,2,2]],[103,"Trail Effect",false,true,"da2/3F5ONDZJilt8MzD7y3",2,[-292],[[78,30,300,0,150,0,1,2,-291,[[11,null],6,0],[2],[6,30],[48],[6,4],[6,0.6],[2],[2],[6,10],[2]]],[2.882,0,0,-3.720393064542541e-16,0,0,1,0.2,0.2,0.2],[1,-4.263256414560601e-14,0,0]],[66,"musicToggle",3,17,[-294,-295],[-293],[5,80,80],[252.747,36.828,0,0,0,0,1,1.82,1.82,1.419]],[66,"soundToggle",3,17,[-297,-298],[-296],[5,80,80],[251.356,-167.939,0,0,0,0,1,1.82,1.82,1.82]],[32,"EffectController",11,[[174,-304,-303,-302,-301,-300,-299]]],[104,"BlackLayout",false,191,3,6,[[11,1,0,-305,[46],47],[83,-306]],[4,4278190080],[5,3840,2160]],[105,"Background",512,3,[-308],[[11,1,0,-307,[54],55]],[5,200,200]],[10,"Scores Scrollview",3,14,[-311],[[74,false,1,0,-309,[191],192],[175,false,0.75,0.23,null,null,-310,9]],[5,240,300],[-8.938,-69.849,0,0,0,0,1,4,3.7,1]],[106,"AppreciationLayout",false,6,[33,-312],[0,590.03,0,0,0,0,1,0.8,0.8,1]],[107,"Background",512,3,[-314],[[11,1,0,-313,[228],229]],[4,4293717228],[5,200,200]],[108,"shareScoreButton",10,[-317],[[35,2,-316,[[9,"288d18SomRMuJaEI+tzg1p1","shareWithFriendsButton",3],[9,"9e7dfQi5u9PM5mJtAnoPcM2","buttonClickSoundEffect",4]],[4,4293322470],[4,4291348680],[4,3363338360],-315,236,237,238,239]],[5,200,200],[-230,-500,0,0,0,0,1,1,1,1]],[109,"Background",512,3,34,[-319],[[11,1,0,-318,[241],242]],[4,4293322470],[5,480,160]],[110,"Background",512,[-321],[[11,1,0,-320,[248],249]],[4,4293322470],[5,200,100]],[1,"GameLogo",3,16,[[4,0,-322,[256],257],[34,9,-323]],[5,1024,512],[11,686,0,0,0,0,1,0.8,0.8,0.528]],[111,"Background",512,42,[-325],[[11,1,0,-324,[259],260]],[5,230,230]],[112,"Background",512,36,[-327],[[11,1,0,-326,[280],281]],[4,4293322470],[5,200,200]],[58,"Cloud_Plane",true,4,12,[[5,-328,[286],287],[177,-329,44,7]],[-275.114,96.01,237.065,0.7071067811865475,0,0,0.7071067811865476,11.605,0.746,2.66],[1,90,0,0]],[67,"Explosion Effect",true,7,[-330],[0,"14iX4XWilFgKzrdwu9Ylmu",7],[0,0,0,0,0.7071067811865475,0,0.7071067811865476,1.579,1.38162,1.579],[1,0,90,0]],[59,"Background",512,3,48,[[4,0,-331,[16],17]],[5,80,80],[0,0,0,0,0,0,1,1,1,0]],[10,"closeButton",3,17,[-334],[[159,1,-333,[[9,"694e3hlMqhEFaSzyDXh7570","settingsCloseButton",3],[9,"9e7dfQi5u9PM5mJtAnoPcM2","buttonClickSoundEffect",4]],[4,4293322470],[4,4291348680],[4,3363338360],-332,21,22,23]],[5,200,200],[4.134,-475.789,0,0,0,0,1,1,1,1.579]],[60,"Background",512,3,64,[[11,1,0,-335,[19],20]],[4,4293322470],[5,200,200]],[59,"Background",512,3,47,[[4,0,-336,[26],27]],[5,80,80],[0,0,0,0,0,0,1,1,1,0]],[42,"Tap",21,[[38,-337,[39],40],[34,13,-338]],[5,65,91],[0,-165,0,0,0,0,1,2.5,2.5,2.5]],[10,"homeButton",3,14,[51],[[160,1,-339,[[9,"fc74bsi2VZKdqFocPB4Tg6Y","leaderboardHomeButton",3],[9,"9e7dfQi5u9PM5mJtAnoPcM2","buttonClickSoundEffect",4]],[4,4291348680],[4,4292861919],[4,3363338360],51,56,57,58,59]],[5,200,200],[0,-786.241,0,0,0,0,1,1,1,1]],[113,"view",512,3,52,[9],[[178,0,-340,[190]]],[5,240,300]],[24,"PositionImageOrText",3,22,[-341,-342],[26.337,-19.327,0,0,0,0,1,0.2625,0.2625,0.2625]],[25,"PlayerPicAndScore",3,22,[-343,-344],[5,350,100],[98.525,-19.327,0,0,0,0,1,0.2625,0.2625,0.2625]],[10,"PlayerImageMask",3,71,[-346],[[21,1,0,-345,[66]]],[5,125,125],[-136.776,-8.627,0,0,0,0,1,1,1,1]],[24,"PositionImageOrText",3,23,[-347,-348],[26.337,-19.327,0,0,0,0,1,0.2625,0.2625,0.2625]],[25,"PlayerPicAndScore",3,23,[-349,-350],[5,350,100],[98.525,-19.327,0,0,0,0,1,0.2625,0.2625,0.2625]],[10,"PlayerImageMask",3,74,[-352],[[21,1,0,-351,[79]]],[5,125,125],[-136.776,-8.627,0,0,0,0,1,1,1,1]],[24,"PositionImageOrText",3,24,[-353,-354],[26.337,-19.327,0,0,0,0,1,0.2625,0.2625,0.2625]],[25,"PlayerPicAndScore",3,24,[-355,-356],[5,350,100],[98.525,-19.327,0,0,0,0,1,0.2625,0.2625,0.2625]],[10,"PlayerImageMask",3,77,[-358],[[21,1,0,-357,[92]]],[5,125,125],[-136.776,-8.627,0,0,0,0,1,1,1,1]],[24,"PositionImageOrText",3,25,[-359,-360],[26.337,-19.327,0,0,0,0,1,0.2625,0.2625,0.2625]],[25,"PlayerPicAndScore",3,25,[-361,-362],[5,350,100],[98.525,-19.327,0,0,0,0,1,0.2625,0.2625,0.2625]],[10,"PlayerImageMask",3,80,[-364],[[21,1,0,-363,[105]]],[5,125,125],[-136.776,-8.627,0,0,0,0,1,1,1,1]],[24,"PositionImageOrText",3,26,[-365,-366],[26.337,-19.327,0,0,0,0,1,0.2625,0.2625,0.2625]],[25,"PlayerPicAndScore",3,26,[-367,-368],[5,350,100],[98.525,-19.327,0,0,0,0,1,0.2625,0.2625,0.2625]],[10,"PlayerImageMask",3,83,[-370],[[21,1,0,-369,[118]]],[5,125,125],[-136.776,-8.627,0,0,0,0,1,1,1,1]],[24,"PositionImageOrText",3,27,[-371,-372],[26.337,-19.327,0,0,0,0,1,0.2625,0.2625,0.2625]],[25,"PlayerPicAndScore",3,27,[-373,-374],[5,350,100],[98.525,-19.327,0,0,0,0,1,0.2625,0.2625,0.2625]],[10,"PlayerImageMask",3,86,[-376],[[21,1,0,-375,[131]]],[5,125,125],[-136.776,-8.627,0,0,0,0,1,1,1,1]],[24,"PositionImageOrText",3,28,[-377,-378],[26.337,-19.327,0,0,0,0,1,0.2625,0.2625,0.2625]],[25,"PlayerPicAndScore",3,28,[-379,-380],[5,350,100],[98.525,-19.327,0,0,0,0,1,0.2625,0.2625,0.2625]],[10,"PlayerImageMask",3,89,[-382],[[21,1,0,-381,[144]]],[5,125,125],[-136.776,-8.627,0,0,0,0,1,1,1,1]],[24,"PositionImageOrText",3,29,[-383,-384],[26.337,-19.327,0,0,0,0,1,0.2625,0.2625,0.2625]],[25,"PlayerPicAndScore",3,29,[-385,-386],[5,350,100],[98.525,-19.327,0,0,0,0,1,0.2625,0.2625,0.2625]],[10,"PlayerImageMask",3,92,[-388],[[21,1,0,-387,[157]]],[5,125,125],[-136.776,-8.627,0,0,0,0,1,1,1,1]],[24,"PositionImageOrText",3,30,[-389,-390],[26.337,-19.327,0,0,0,0,1,0.2625,0.2625,0.2625]],[25,"PlayerPicAndScore",3,30,[-391,-392],[5,350,100],[98.525,-19.327,0,0,0,0,1,0.2625,0.2625,0.2625]],[10,"PlayerImageMask",3,95,[-394],[[21,1,0,-393,[170]]],[5,125,125],[-136.776,-8.627,0,0,0,0,1,1,1,1]],[24,"PositionImageOrText",3,31,[-395,-396],[26.337,-19.327,0,0,0,0,1,0.2625,0.2625,0.2625]],[25,"PlayerPicAndScore",3,31,[-397,-398],[5,350,100],[98.525,-19.327,0,0,0,0,1,0.2625,0.2625,0.2625]],[10,"PlayerImageMask",3,98,[-400],[[21,1,0,-399,[183]]],[5,125,125],[-136.776,-8.627,0,0,0,0,1,1,1,1]],[114,"OpponentImageMask",33,[-402],[[21,1,0,-401,[209]]],[5,200,200]],[126,"OpponentImage",3,100,[-404],[-403],[5,200,200]],[115,"BlackLayout",false,10,3,33,[[11,1,0,-405,[210],211],[83,-406]],[4,4278190080],[5,3840,2160],[0,-153.323,0,0,0,0,1,0.127,0.044,0.094]],[61,"AppreciationText",false,3,53,[[29,"You've just passed Fahim",80,70,false,1,1,-407,[214],215],[155,14,-1184.877,-408]],[4,4278224383],[5,896.33,88.2],[-1184.877,-164.04,0,0,0,0,1,1,1,1]],[62,"PositionTextAndImage",10,[-409,-410],[181.908,-180.108,0,0,0,0,1,1,1,1]],[10,"retryButton",3,10,[-413],[[35,1,-412,[[9,"288d18SomRMuJaEI+tzg1p1","retryButton",3],[9,"9e7dfQi5u9PM5mJtAnoPcM2","buttonClickSoundEffect",4]],[4,4293322470],[4,4291348680],[4,3363338360],-411,223,224,225,226]],[5,200,200],[230,-500,0,0,0,0,1,1,1,0.721]],[60,"Background",512,3,105,[[11,1,0,-414,[221],222]],[4,4293322470],[5,200,200]],[10,"homeButton",3,10,[54],[[35,1,-415,[[9,"288d18SomRMuJaEI+tzg1p1","gameOverHomeButton",3],[9,"9e7dfQi5u9PM5mJtAnoPcM2","buttonClickSoundEffect",4]],[4,4293717228],[4,4291348680],[4,3363338360],54,230,231,232,233]],[5,200,200],[0,-500,0,0,0,0,1,1,1,0.46]],[43,"Background",512,55,[[11,1,0,-416,[234],235]],[4,4293322470],[5,200,200]],[116,"continueTestButton",false,10,[57],[[35,1,-417,[[9,"c4447JE2URKXp0Sit7VIBlT","testButtonFunc",5]],[4,4293322470],[4,4291348680],[4,3363338360],57,250,251,252,253]],[5,200,100],[0,-695.001,0,0,0,0,1,1,1,1]],[43,"Background",512,43,[[11,1,0,-418,[264],265]],[4,4293322470],[5,100,100]],[43,"Background",512,35,[[11,1,0,-419,[270],271]],[4,4293322470],[5,200,200]],[62,"HeadphoneInstruction",35,[-420],[0,300,0,0,0,0,1,0.7353,0.7353,0.7353]],[63,"vector headphones",112,[[38,-421,[272],273],[34,8,-422]],[5,958,336]],[32,"ObstacleController",11,[[179,-424,5,[297,298,299,300,301],-423]]],[41,"Obstacles","6ep1K52uFNcbxE4ZVeJqeQ",2,[8]],[44,"Obstacle_CIRCLE",true,2,8,[[5,-425,[302],303]],[0,"Obstacle_SQUIRE",8],[0,0,0,-0.7071068286895765,0,0,0.7071067336835153,100,100,100],[1,-90.00000769819565,0,0]],[117,"Directional Light",true,"33XZTjM65AOIpc0qVRPHf9",2,[[180,0.9,1000,50,-426]],[499.086,194.53,-188.851,-0.37856073437907656,0.5088446670244433,0.7262332940467541,0.265243431295025,1,1,1],[1,-109.96500000000002,124.93700000000001,-6.3611093629270335e-15]],[118,"Ambient Light",true,"10oVuP0yBNgqv/4BDrPFu9",2,[[181,3,1,1000,50,-427,[4,4286545792]]]],[8,"Plane",true,4,45,[[5,-428,[0],1]],[0,"Plane",45],[-10.117,0,0,0,0,0,1,100,100,100]],[8,"Plane",true,4,15,[[5,-429,[2],3]],[0,"Plane",15],[0,0,0,0,0,0,1,100,100,100]],[8,"Plane copy",true,4,15,[[5,-430,[4],5]],[0,"95ALiJPxBEaY54jm5+R+p/",15],[71.596,0,0,0,0,0,1,100,100,100]],[119,"UI Camera",3,6,[[182,-24,-431,[4,4291798866]]],[0,0,365.46272039703314,0,0,0,1,1,1,1]],[67,"Airplane",true,7,[-432],[0,"Airplane",7],[0,0,0,-0.7071068286895765,0,0,0.7071067336835153,100,100,100],[1,-90.00000769819565,0,0]],[176,123,[8]],[165,3,false,false,0,2,0,62,[9],[2],[6,2],[82,[4,4288075504]],[31,3,0.5,1],[6,1],[79,3,45],[2],[2],[2],[[185,0.1,200,500,[6,15]]],[186,true,3,3,200,100,100,[6,49.8],[1,0.7,0.8,0.2]],[188,true,[171,1,0.6,[189,2,2,[[190,1],[191,1]]]],[2],[2],[2]],[194,true,0,0.8,[6,1],[2],[2],[2]]],[120,"trailNode copy",true,46,[[78,30,300,0,150,0,1,2,-433,[[10,null],6,0],[2],[6,30],[48],[6,4],[6,0.6],[2],[2],[6,10],[2]]],[-31.887,0,0,0,0,0,1,1,1,1]],[195,3,47,[4,4292269782],66],[18,"MusicLabel",false,3,17,[[29,"MUSIC",80,80,false,1,1,-434,[12],13]],[5,312.46,100.8],[-35.272,154.737,0,0,0,0,1,1,1,1]],[18,"Sound Label",false,3,17,[[29,"SOUND",80,80,false,1,1,-435,[14],15]],[5,337.42,100.8],[-30.803,-35.272,0,0,0,0,1,1,1,1]],[68,"checkmark",512,3,48,[-436],[5,80,80]],[75,0,false,130,[18]],[196,0.2,3,48,[4,4292269782],63,131],[68,"checkmark",512,3,47,[-437],[5,80,80]],[75,0,false,133,[28]],[166,10,1,false,0,5,0,[37],[2],[6,10],[48],[31,3,50,100],[80,3,10,20,5],[2],[2],[6,5],[2],[84,true,0,true,[2],[1,0,180,0],[1,10,10,1]]],[127,"Wind Effect",true,40,[135],[0,0,-27.237,0,0,0,1,1,1,1]],[69,"Glowing Star Effect",true,4,40,[-438],[-358,57.149,361.979,0,0,0,1,1,1,1]],[167,20,200,0,0,137,[34],[2],[6,20],[48],[31,3,0.3,0.5],[6,5],[2],[2],[6,10],[2],[85,true,0,[2],[1,0,90,0],[1,50,50,10]]],[128,"Rain Effect",true,4,40,[-439],[-401.465,126.873,347.068,0.7071067811865475,0,0,0.7071067811865476,1,1,1],[1,90,0,0]],[168,200,false,0,5,0,1,0.5,139,[35],[2],[6,5],[172,2,[4,4286611584]],[31,3,0.05,0.1],[80,3,10,20,5],[2],[2],[6,20],[2],[84,true,0,true,[2],[1,0,-160,0],[1,50,50,5]]],[121,"Fog Effect",false,true,4,40,[[169,20,0,0,-440,[36],[2],[6,20],[173,2,[4,33554431],[4,33554431]],[31,3,30,60],[6,5],[2],[2],[6,10],[2],[85,true,0,[2],[1,0,90,0],[1,50,50,1]]]],[-359.242,57.149,361.979,0,0,0,1,1,1,1]],[170,15,7,false,false,0,1.2,0,[38],[79,3,2],[6,15],[82,[4,4278190080]],[31,3,6,8],[31,3,11,12],[2],[2],[6,10],[2],[187,true,0.08726646259971647,true,2,1,[2],[1,5,5,0],[1,20,-90,-10],[1,10,10,10]],[197,true,5,4,19,[81,1,[86,2,2,[-443,-444]]],[81,1,[86,2,2,[-441,-442]]]]],[69,"Bird Flock Effect",true,4,12,[142],[-442.127,-24.908,151.886,0,0,0,1,1,1,1]],[192,1,1],[193,1,1,1,1],[183,-25,7,-1,1.25,250,false,false,13,[4,4291140398]],[42,"tapandholdLabel",21,[[29,"Tap & Hold to Ascend",80,80,false,1,1,-445,[41],42]],[5,766.17,100.8],[0,-343,0,0,0,0,1,1,1,1]],[129,"ScoreLabel",0,3,6,[-446],[5,94.48,252],[0,945.418,0,0,0,0,1,1.8,1.8,1]],[76,"0",150,200,false,1,1,148,[44]],[70,"CountdownTimerLabel",false,3,6,[-447],[4,4279118591],[5,200,200],[0,222.115,0,0,0,0,1,1.00001,1.00001,1.00001]],[39,"3",250,200,false,1,1,2,150,[45]],[42,"scoreSprite",14,[[38,-448,[48],49]],[5,512,100],[0,816.138,0,0,0,0,1,1,1,1]],[71,"bestScoreText",14,[-449],[5,400,150],[0,683.03,0,0,0,0,1,1,1,1]],[39,"0",150,90,false,1,1,2,153,[50]],[42,"LeaderBoardIcon",14,[[38,-450,[51],52]],[5,512,474],[-393.82,612.87,0,0,0,0,1,0.294,0.294,0.294]],[52,"Label",512,false,3,51,[[77,"Main Menu",60,false,1,1,1,1,-451,[53]]],[4,4278190080],[5,200,80]],[18,"positionText",false,3,70,[[20,"1",120,100,false,1,1,2,-452,[60],61]],[5,130,110],[-3.199,-3.199,0,0,0,0,1,1,1,1]],[1,"positionImage",3,70,[[4,0,-453,[62],63]],[5,130,110],[-3.199,-9.598,0,0,0,0,1,1,1,1]],[1,"PlayerImage",3,72,[[4,0,-454,[64],65]],[5,125,125],[0,0.806,0,0,0,0,1,1,1,1]],[1,"PlayerName",3,71,[[26,"N/A",60,50,false,1,2,2,-455,[67],68]],[5,290,100],[92.29,-5.735,0,0,0,0,1,1,1,1]],[1,"PlayerScore",3,22,[[27,"0",70,60,false,1,1,2,2,-456,[69],70]],[5,200,100],[187.885,-20.531,0,0,0,0,1,0.2625,0.2625,0.2625]],[18,"positionText",false,3,73,[[20,"1",120,100,false,1,1,2,-457,[73],74]],[5,130,110],[-3.199,-3.199,0,0,0,0,1,1,1,1]],[1,"positionImage",3,73,[[4,0,-458,[75],76]],[5,130,110],[-3.199,-9.598,0,0,0,0,1,1,1,1]],[1,"PlayerImage",3,75,[[4,0,-459,[77],78]],[5,125,125],[0,0.806,0,0,0,0,1,1,1,1]],[1,"PlayerName",3,74,[[26,"Fahim",60,50,false,1,2,2,-460,[80],81]],[5,290,100],[92.29,-5.735,0,0,0,0,1,1,1,1]],[1,"PlayerScore",3,23,[[27,"10",70,60,false,1,1,2,2,-461,[82],83]],[5,200,100],[187.885,-20.531,0,0,0,0,1,0.2625,0.2625,0.2625]],[18,"positionText",false,3,76,[[20,"1",120,100,false,1,1,2,-462,[86],87]],[5,130,110],[-3.199,-3.199,0,0,0,0,1,1,1,1]],[1,"positionImage",3,76,[[4,0,-463,[88],89]],[5,130,110],[-3.199,-9.598,0,0,0,0,1,1,1,1]],[1,"PlayerImage",3,78,[[4,0,-464,[90],91]],[5,125,125],[0,0.806,0,0,0,0,1,1,1,1]],[1,"PlayerName",3,77,[[26,"Fahim",60,50,false,1,2,2,-465,[93],94]],[5,290,100],[92.29,-5.735,0,0,0,0,1,1,1,1]],[1,"PlayerScore",3,24,[[27,"10",70,60,false,1,1,2,2,-466,[95],96]],[5,200,100],[187.885,-20.531,0,0,0,0,1,0.2625,0.2625,0.2625]],[1,"positionText",3,79,[[20,"4",120,100,false,1,1,2,-467,[99],100]],[5,130,110],[-3.199,-3.199,0,0,0,0,1,1,1,1]],[18,"positionImage",false,3,79,[[4,0,-468,[101],102]],[5,130,110],[-3.199,-9.598,0,0,0,0,1,1,1,1]],[1,"PlayerImage",3,81,[[4,0,-469,[103],104]],[5,125,125],[0,0.806,0,0,0,0,1,1,1,1]],[1,"PlayerName",3,80,[[26,"Fahim",60,50,false,1,2,2,-470,[106],107]],[5,290,100],[92.29,-5.735,0,0,0,0,1,1,1,1]],[1,"PlayerScore",3,25,[[27,"10",70,60,false,1,1,2,2,-471,[108],109]],[5,200,100],[187.885,-20.531,0,0,0,0,1,0.2625,0.2625,0.2625]],[1,"positionText",3,82,[[20,"5",120,100,false,1,1,2,-472,[112],113]],[5,130,110],[-3.199,-3.199,0,0,0,0,1,1,1,1]],[18,"positionImage",false,3,82,[[4,0,-473,[114],115]],[5,130,110],[-3.199,-9.598,0,0,0,0,1,1,1,1]],[1,"PlayerImage",3,84,[[4,0,-474,[116],117]],[5,125,125],[0,0.806,0,0,0,0,1,1,1,1]],[1,"PlayerName",3,83,[[26,"Fahim",60,50,false,1,2,2,-475,[119],120]],[5,290,100],[92.29,-5.735,0,0,0,0,1,1,1,1]],[1,"PlayerScore",3,26,[[27,"10",70,60,false,1,1,2,2,-476,[121],122]],[5,200,100],[187.885,-20.531,0,0,0,0,1,0.2625,0.2625,0.2625]],[1,"positionText",3,85,[[20,"6",120,100,false,1,1,2,-477,[125],126]],[5,130,110],[-3.199,-3.199,0,0,0,0,1,1,1,1]],[18,"positionImage",false,3,85,[[4,0,-478,[127],128]],[5,130,110],[-3.199,-9.598,0,0,0,0,1,1,1,1]],[1,"PlayerImage",3,87,[[4,0,-479,[129],130]],[5,125,125],[0,0.806,0,0,0,0,1,1,1,1]],[1,"PlayerName",3,86,[[26,"Fahim",60,50,false,1,2,2,-480,[132],133]],[5,290,100],[92.29,-5.735,0,0,0,0,1,1,1,1]],[1,"PlayerScore",3,27,[[27,"10",70,60,false,1,1,2,2,-481,[134],135]],[5,200,100],[187.885,-20.531,0,0,0,0,1,0.2625,0.2625,0.2625]],[1,"positionText",3,88,[[20,"7",120,100,false,1,1,2,-482,[138],139]],[5,130,110],[-3.199,-3.199,0,0,0,0,1,1,1,1]],[18,"positionImage",false,3,88,[[4,0,-483,[140],141]],[5,130,110],[-3.199,-9.598,0,0,0,0,1,1,1,1]],[1,"PlayerImage",3,90,[[4,0,-484,[142],143]],[5,125,125],[0,0.806,0,0,0,0,1,1,1,1]],[1,"PlayerName",3,89,[[26,"Fahim",60,50,false,1,2,2,-485,[145],146]],[5,290,100],[92.29,-5.735,0,0,0,0,1,1,1,1]],[1,"PlayerScore",3,28,[[27,"10",70,60,false,1,1,2,2,-486,[147],148]],[5,200,100],[187.885,-20.531,0,0,0,0,1,0.2625,0.2625,0.2625]],[1,"positionText",3,91,[[20,"8",120,100,false,1,1,2,-487,[151],152]],[5,130,110],[-3.199,-3.199,0,0,0,0,1,1,1,1]],[18,"positionImage",false,3,91,[[4,0,-488,[153],154]],[5,130,110],[-3.199,-9.598,0,0,0,0,1,1,1,1]],[1,"PlayerImage",3,93,[[4,0,-489,[155],156]],[5,125,125],[0,0.806,0,0,0,0,1,1,1,1]],[1,"PlayerName",3,92,[[26,"Fahim",60,50,false,1,2,2,-490,[158],159]],[5,290,100],[92.29,-5.735,0,0,0,0,1,1,1,1]],[1,"PlayerScore",3,29,[[27,"10",70,60,false,1,1,2,2,-491,[160],161]],[5,200,100],[187.885,-20.531,0,0,0,0,1,0.2625,0.2625,0.2625]],[1,"positionText",3,94,[[20,"9",120,100,false,1,1,2,-492,[164],165]],[5,130,110],[-3.199,-3.199,0,0,0,0,1,1,1,1]],[18,"positionImage",false,3,94,[[4,0,-493,[166],167]],[5,130,110],[-3.199,-9.598,0,0,0,0,1,1,1,1]],[1,"PlayerImage",3,96,[[4,0,-494,[168],169]],[5,125,125],[0,0.806,0,0,0,0,1,1,1,1]],[1,"PlayerName",3,95,[[26,"Fahim",60,50,false,1,2,2,-495,[171],172]],[5,290,100],[92.29,-5.735,0,0,0,0,1,1,1,1]],[1,"PlayerScore",3,30,[[27,"10",70,60,false,1,1,2,2,-496,[173],174]],[5,200,100],[187.885,-20.531,0,0,0,0,1,0.2625,0.2625,0.2625]],[1,"positionText",3,97,[[20,"10",120,100,false,1,1,2,-497,[177],178]],[5,130,110],[-3.199,-3.199,0,0,0,0,1,1,1,1]],[18,"positionImage",false,3,97,[[4,0,-498,[179],180]],[5,130,110],[-3.199,-9.598,0,0,0,0,1,1,1,1]],[1,"PlayerImage",3,99,[[4,0,-499,[181],182]],[5,125,125],[0,0.806,0,0,0,0,1,1,1,1]],[1,"PlayerName",3,98,[[26,"Fahim",60,50,false,1,2,2,-500,[184],185]],[5,290,100],[92.29,-5.735,0,0,0,0,1,1,1,1]],[1,"PlayerScore",3,31,[[27,"10",70,60,false,1,1,2,2,-501,[186],187]],[5,200,100],[187.885,-20.531,0,0,0,0,1,0.2625,0.2625,0.2625]],[63,"BG",41,[[4,0,-502,[195],196]],[5,2566,1920]],[53,"Dot-1",3,32,[[29,".",120,100,false,1,1,-503,[197],198]],[5,48.69,126],[0,-2.9767915445377873,0.5407538226401745]],[53,"Dot-2",3,32,[[29,".",120,100,false,1,1,-504,[199],200]],[5,48.69,126],[0,-4.029984212711526,0.5407538226401745]],[53,"Dot-3",3,32,[[29,".",120,100,false,1,1,-505,[201],202]],[5,48.69,126],[0,-5.083176880885267,0.5407538226401745]],[70,"OpponentScore",false,3,101,[-506],[4,4283861462],[5,57.1,75.6],[0,-99.71,0,0,0,0,1,1,1,1]],[76,"10",60,60,false,1,1,211,[207]],[145,0,101,[208]],[61,"BeatHimLabel",false,3,33,[[20,"You just beat him",70,70,false,1,1,2,-507,[212],213]],[4,4278226943],[5,800,80],[0,-145.698,0,0,0,0,1,0.621,1.143,0.514]],[130,"BeatHimRichtext",3,33,[-508],[4,4278226943],[5,643.38,88.2],[-6.913,-179.066,0,0,0,0,1,0.727,1.306,1.306]],[198,false,"<outline color=#ffff90 width=5>You just Beat Fahim </outline>",1,60,2,643.38,70,215],[72,"PlayerScore_Text",3,10,[-509],[5,370,212],[-5,71,0,0,0,0,1,1,1,1]],[39,"0",120,80,false,1,1,2,217,[216]],[72,"PlayerBestScore_Text",3,10,[-510],[5,150,80],[186.4,-294.075,0,0,0,0,1,1,1,1]],[39,"0",80,55,false,1,1,2,219,[217]],[71,"PlayerPosition_Text",104,[-511],[5,150,80],[2.583,16.574,0,0,0,0,1,1,1,1]],[39,"0",80,55,false,1,1,2,221,[218]],[122,"Image",false,104,[[38,-512,[219],220]],[5,512,367],[5.403,5.403,0,0,0,0,1,0.193,0.193,0.193]],[52,"Label",512,false,3,54,[[77,"Main Menu",60,false,1,1,1,1,-513,[227]]],[4,4278190080],[5,200,80]],[52,"Label",512,false,3,56,[[54,"button",20,false,1,1,1,1,-514,[240]]],[4,4278190080],[5,100,40]],[43,"Label",512,57,[[54,"button",20,false,1,1,1,1,-515,[247]]],[4,4278190080],[5,100,40]],[64,"Label",512,false,59,[[149,"PLAY SOLO",80,100,false,1,1,1,1,-516,[258]]],[4,4278190080],[5,600,240]],[64,"Label",512,false,60,[[54,"button",20,false,1,1,1,1,-517,[279]]],[4,4278190080],[5,100,40]],[8,"Sphere.003",true,4,19,[[5,-518,[288],289]],[0,"Sphere.003",19],[0,0,0,0,0,0,1,100,100,100]],[8,"Sphere.002",true,4,19,[[5,-519,[290],291]],[0,"Sphere.002",19],[0,0,0,0,0,0,1,100,100,100]],[8,"Sphere",true,4,20,[[5,-520,[292],293]],[0,"Sphere",20],[0,0,0,0,0,0,1,100,100,100]],[8,"Sphere.001",true,4,20,[[5,-521,[294],295]],[0,"Sphere.001",20],[0,0,0,0,0,0,1,100,100,100]],[17,"Colliders",true,8,[[7,-522,[1,0,1.45,-0.1],[1,2.063,0.218,0.35]]],[0,"68ElFupglHAp+vcio6NhRt",8]],[17,"Colliders copy",true,8,[[7,-523,[1,0,-1.5,-0.1],[1,2.263,0.318,0.35]]],[0,"f502erahtOV6nCpLf5T+GZ",8]],[17,"Colliders copy",true,8,[[7,-524,[1,1.48,0,-0.1],[1,0.23,2,0.35]]],[0,"54MDEChWdJFIWa0psXgQ8u",8]],[17,"Colliders copy",true,8,[[7,-525,[1,-1.46,0,-0.1],[1,0.3,2.1,0.35]]],[0,"faDKM2ewRG8ZBz7z6Sq6QB",8]],[8,"Sphere.004",true,4,1,[[5,-526,[305],306]],[0,"Sphere.004",1],[34.618,-21.859,0,0,0,0,1,200,200,200]],[8,"Sphere.004 copy",true,4,1,[[5,-527,[307],308]],[0,"66m1mjp5BHAbVcYT1s5tKR",1],[-46.1,-34.271,0,0,0,0,1,350,350,350]],[8,"Sphere.004 copy",true,4,1,[[5,-528,[309],310]],[0,"6bpUr0GblA5KfnhgPY3EC5",1],[-78.698,-12.019,0,0,0,0,1,250,250,250]],[8,"Sphere.004 copy",true,4,1,[[5,-529,[311],312]],[0,"94zJ82yxNJF4OINE9ID1G8",1],[-65.325,-25.726,0,0,0,0,1,400,400,400]],[8,"Sphere.004 copy",true,4,1,[[5,-530,[313],314]],[0,"8bTT24fgtGf6GTds3wYZ3r",1],[-50.068,-9.203,0,0,0,0,1,320,320,320]],[8,"Sphere.004 copy",true,4,1,[[5,-531,[315],316]],[0,"abNjyLVaBMNZcCoHApHiui",1],[16.46,-19.28,0,0,0,0,1,270,270,270]],[8,"Sphere.004 copy",true,4,1,[[5,-532,[317],318]],[0,"97IjrDqURD/L9ohRJRah9H",1],[-68.683,2.007,0,0,0,0,1,270,270,270]],[8,"Sphere.004 copy",true,4,1,[[5,-533,[319],320]],[0,"e07+V5TkZHtKvBFU4XdcyJ",1],[41.044,-8.591,0,0,0,0,1,270,270,270]],[8,"Sphere.004 copy",true,4,1,[[5,-534,[321],322]],[0,"c98beeXjVJ7o0vPY6uO26R",1],[-9.338,-16.876,0,0,0,0,1,450,450,450]],[8,"Sphere.004 copy",true,4,1,[[5,-535,[323],324]],[0,"87/x+9VPROdblWRRXcvRvp",1],[-26.459,-4.352,0,0,0,0,1,470,470,470]],[8,"Sphere.004 copy",true,4,1,[[5,-536,[325],326]],[0,"f8JnmOwZhPdYbvPlM4tZI4",1],[-91.575,-4.488,0,0,0,0,1,470,470,470]],[8,"Sphere.004 copy",true,4,1,[[5,-537,[327],328]],[0,"01cDqwqOdGj5alEWsV4+V/",1],[0,0,0,0,0,0,1,380,380,380]],[8,"Sphere.004 copy",true,4,1,[[5,-538,[329],330]],[0,"60ESm/hMJAjoeAosRxgpxG",1],[20.983,-5.537,0,0,0,0,1,280,280,280]],[8,"Sphere.004 copy",true,4,1,[[5,-539,[331],332]],[0,"d15HM7oz1AfYSujAInny7C",1],[-88,-35.224,0,0,0,0,1,280,280,280]],[8,"Sphere.004 copy",true,4,1,[[5,-540,[333],334]],[0,"be1nlhTY5CDJgPtPYCAKRm",1],[32.655,4.236,0,0,0,0,1,280,280,280]],[58,"AmbientBG_Plane",true,4,12,[[5,-541,[335],336]],[-301.614,46.627,236.855,0.7071067811865475,0,0,0.7071067811865476,50,1,30],[1,90,0,0]],[123,"Environment Camera",0,true,"82RYSISLlDJ74moaavoLYi",2,[[184,16,4,-1,50,280,false,false,-542]],[-378.879,57.149,417.615,0,0,0,1,1,1,1]],[124,"BlackLayoutRoot","168VM83jVOhaz+5bkNrQtq",2,[[150,-543,[337]]],[5,0,50.4]]],0,[0,7,1,0,-1,237,0,-2,238,0,-3,239,0,-4,240,0,-5,241,0,-6,242,0,-7,243,0,-8,244,0,-9,245,0,-10,246,0,-11,247,0,-12,248,0,-13,249,0,-14,250,0,-15,251,0,-1,117,0,-2,118,0,5,2,0,-4,12,0,5,2,0,-6,13,0,-7,253,0,5,2,0,-9,6,0,5,2,0,-11,7,0,-12,46,0,5,2,0,-14,11,0,5,2,0,-16,40,0,5,2,0,-18,115,0,-19,254,0,17,18,0,27,41,0,28,112,0,19,38,0,29,17,0,22,14,0,20,5,0,30,36,0,31,35,0,32,43,0,33,42,0,34,58,0,23,13,0,35,16,0,0,3,0,17,18,0,36,44,0,19,38,0,37,222,0,38,220,0,39,218,0,20,5,0,21,37,0,40,34,0,41,55,0,42,10,0,43,50,0,0,3,0,44,216,0,45,212,0,46,213,0,47,53,0,24,7,0,20,5,0,48,151,0,49,21,0,50,149,0,0,3,0,17,18,0,51,154,0,-1,22,0,-2,23,0,-3,24,0,-4,25,0,-5,26,0,-6,27,0,-7,28,0,-8,29,0,-9,30,0,-10,31,0,22,14,0,0,3,0,52,132,0,53,127,0,0,4,0,17,18,0,23,13,0,54,114,0,21,37,0,24,7,0,0,5,0,0,6,0,-1,122,0,-2,39,0,-3,148,0,-4,150,0,-5,16,0,-6,50,0,-7,17,0,-8,14,0,-9,41,0,-10,21,0,-11,53,0,-12,10,0,7,7,0,0,7,0,25,13,0,55,39,0,26,49,0,56,46,0,57,124,0,58,62,0,59,39,0,0,7,0,0,7,0,-1,123,0,-2,62,0,7,8,0,0,8,0,14,116,0,0,8,0,-1,116,0,-2,233,0,-3,234,0,-4,235,0,-5,236,0,0,9,0,-1,22,0,-2,23,0,-3,24,0,-4,25,0,-5,26,0,-6,27,0,-7,28,0,-8,29,0,-9,30,0,-10,31,0,0,10,0,-1,217,0,-2,219,0,-3,104,0,-4,105,0,-5,107,0,-6,55,0,-7,34,0,-8,109,0,-2,38,0,-4,44,0,-5,114,0,-6,49,0,-7,37,0,-9,18,0,-1,45,0,-2,15,0,-3,19,0,-4,143,0,-6,20,0,-7,252,0,-8,61,0,-1,146,0,0,13,0,0,14,0,-1,152,0,-2,153,0,-3,155,0,-4,68,0,-5,52,0,7,15,0,60,44,0,0,15,0,-1,120,0,-2,121,0,0,16,0,-1,58,0,-2,42,0,-3,43,0,-4,35,0,-5,36,0,0,17,0,-1,128,0,-2,129,0,-3,47,0,-4,48,0,-5,64,0,19,38,0,21,37,0,0,18,0,7,19,0,-1,229,0,-2,230,0,7,20,0,-1,231,0,-2,232,0,0,21,0,-1,67,0,-2,147,0,0,22,0,-1,70,0,-2,71,0,-3,161,0,0,23,0,-1,73,0,-2,74,0,-3,166,0,0,24,0,-1,76,0,-2,77,0,-3,171,0,0,25,0,-1,79,0,-2,80,0,-3,176,0,0,26,0,-1,82,0,-2,83,0,-3,181,0,0,27,0,-1,85,0,-2,86,0,-3,186,0,0,28,0,-1,88,0,-2,89,0,-3,191,0,0,29,0,-1,91,0,-2,92,0,-3,196,0,0,30,0,-1,94,0,-2,95,0,-3,201,0,0,31,0,-1,97,0,-2,98,0,-3,206,0,0,32,0,0,32,0,-1,208,0,-2,209,0,-3,210,0,0,33,0,-1,100,0,-2,102,0,-3,214,0,-4,215,0,13,56,0,0,34,0,0,34,0,0,34,0,-1,56,0,13,111,0,0,35,0,0,35,0,-1,111,0,-2,112,0,13,60,0,0,36,0,0,36,0,0,36,0,-1,60,0,0,37,0,0,38,0,0,39,0,0,39,0,-1,137,0,-2,136,0,-3,139,0,-4,141,0,0,41,0,-1,207,0,13,59,0,0,42,0,0,42,0,-1,59,0,13,110,0,0,43,0,0,43,0,-1,110,0,25,146,0,26,49,0,-1,61,0,0,44,0,7,45,0,-1,119,0,0,46,0,-1,126,0,-1,127,0,-1,66,0,-2,133,0,-1,132,0,-1,63,0,-2,130,0,61,138,0,62,142,0,63,125,0,64,140,0,65,135,0,0,49,0,0,50,0,0,50,0,0,51,0,-1,156,0,0,52,0,0,52,0,-1,69,0,-2,103,0,0,54,0,-1,224,0,13,108,0,0,55,0,-1,108,0,0,56,0,-1,225,0,0,57,0,-1,226,0,0,58,0,0,58,0,0,59,0,-1,227,0,0,60,0,-1,228,0,0,61,0,0,61,0,-1,125,0,0,63,0,13,65,0,0,64,0,-1,65,0,0,65,0,0,66,0,0,67,0,0,67,0,0,68,0,0,69,0,-1,157,0,-2,158,0,-1,72,0,-2,160,0,0,72,0,-1,159,0,-1,162,0,-2,163,0,-1,75,0,-2,165,0,0,75,0,-1,164,0,-1,167,0,-2,168,0,-1,78,0,-2,170,0,0,78,0,-1,169,0,-1,172,0,-2,173,0,-1,81,0,-2,175,0,0,81,0,-1,174,0,-1,177,0,-2,178,0,-1,84,0,-2,180,0,0,84,0,-1,179,0,-1,182,0,-2,183,0,-1,87,0,-2,185,0,0,87,0,-1,184,0,-1,187,0,-2,188,0,-1,90,0,-2,190,0,0,90,0,-1,189,0,-1,192,0,-2,193,0,-1,93,0,-2,195,0,0,93,0,-1,194,0,-1,197,0,-2,198,0,-1,96,0,-2,200,0,0,96,0,-1,199,0,-1,202,0,-2,203,0,-1,99,0,-2,205,0,0,99,0,-1,204,0,0,100,0,-1,101,0,-1,213,0,-1,211,0,0,102,0,0,102,0,0,103,0,0,103,0,-1,221,0,-2,223,0,13,106,0,0,105,0,-1,106,0,0,106,0,0,107,0,0,108,0,0,109,0,0,110,0,0,111,0,-1,113,0,0,113,0,0,113,0,66,115,0,0,114,0,0,116,0,0,117,0,0,118,0,0,119,0,0,120,0,0,121,0,0,122,0,-1,124,0,0,126,0,0,128,0,0,129,0,-1,131,0,-1,134,0,-1,138,0,-1,140,0,0,141,0,-1,144,0,-2,145,0,-1,144,0,-2,145,0,0,147,0,-1,149,0,-1,151,0,0,152,0,-1,154,0,0,155,0,0,156,0,0,157,0,0,158,0,0,159,0,0,160,0,0,161,0,0,162,0,0,163,0,0,164,0,0,165,0,0,166,0,0,167,0,0,168,0,0,169,0,0,170,0,0,171,0,0,172,0,0,173,0,0,174,0,0,175,0,0,176,0,0,177,0,0,178,0,0,179,0,0,180,0,0,181,0,0,182,0,0,183,0,0,184,0,0,185,0,0,186,0,0,187,0,0,188,0,0,189,0,0,190,0,0,191,0,0,192,0,0,193,0,0,194,0,0,195,0,0,196,0,0,197,0,0,198,0,0,199,0,0,200,0,0,201,0,0,202,0,0,203,0,0,204,0,0,205,0,0,206,0,0,207,0,0,208,0,0,209,0,0,210,0,-1,212,0,0,214,0,-1,216,0,-1,218,0,-1,220,0,-1,222,0,0,223,0,0,224,0,0,225,0,0,226,0,0,227,0,0,228,0,0,229,0,0,230,0,0,231,0,0,232,0,0,233,0,0,234,0,0,235,0,0,236,0,0,237,0,0,238,0,0,239,0,0,240,0,0,241,0,0,242,0,0,243,0,0,244,0,0,245,0,0,246,0,0,247,0,0,248,0,0,249,0,0,250,0,0,251,0,0,252,0,0,253,0,0,254,0,67,2,1,5,12,3,5,11,4,5,11,5,5,11,8,5,115,9,5,69,32,5,41,33,5,53,51,5,68,54,5,107,57,5,109,127,68,134,135,0,136,142,0,143,543],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,131,134,149,151,154,212,213,216,218,220,222],[-1,4,-1,4,-1,4,-1,1,-1,-1,-1,-1,-1,2,-1,2,-1,1,-1,-1,1,8,9,10,-1,1,-1,1,-1,69,70,71,72,73,-1,-1,-1,-1,-1,-1,1,-1,2,-1,-1,-1,-1,1,-1,1,-1,-1,1,-1,-1,1,12,8,9,10,-1,2,-1,1,-1,1,-1,-1,2,-1,2,-1,1,-1,2,-1,1,-1,1,-1,-1,2,-1,2,-1,1,-1,2,-1,1,-1,1,-1,-1,2,-1,2,-1,1,-1,2,-1,1,-1,1,-1,-1,2,-1,2,-1,1,-1,2,-1,1,-1,1,-1,-1,2,-1,2,-1,1,-1,2,-1,1,-1,1,-1,-1,2,-1,2,-1,1,-1,2,-1,1,-1,1,-1,-1,2,-1,2,-1,1,-1,2,-1,1,-1,1,-1,-1,2,-1,2,-1,1,-1,2,-1,1,-1,1,-1,-1,2,-1,2,-1,1,-1,2,-1,1,-1,1,-1,-1,2,-1,2,-1,1,-1,-1,1,-1,1,-1,1,-1,2,-1,2,-1,2,-1,2,74,-1,-1,-1,-1,-1,1,-1,2,-1,2,-1,-1,-1,-1,1,-1,1,12,8,9,10,-1,-1,1,12,8,9,10,-1,1,12,8,9,10,-1,-1,1,12,8,9,10,-1,-1,1,12,8,9,10,-1,1,-1,1,-1,-1,1,8,9,10,-1,1,12,8,9,10,-1,1,-1,1,75,12,8,9,10,-1,-1,1,12,8,9,10,-1,4,-1,4,-1,4,-1,4,-1,4,76,-1,-2,-3,-4,-5,-1,4,15,-1,4,-1,4,-1,4,-1,4,-1,4,-1,4,-1,4,-1,4,-1,4,-1,4,-1,4,-1,4,-1,4,-1,4,-1,4,-1,4,-1,4,1,1,2,2,2,2,1,77,2,2,2],[19,20,19,20,19,20,0,16,46,47,14,14,0,11,0,11,0,48,0,0,49,9,6,10,0,50,0,51,0,52,53,54,55,56,14,14,14,57,58,0,59,0,1,0,0,0,0,16,0,60,0,0,61,0,0,17,17,9,6,10,0,1,0,7,0,4,0,0,1,0,1,0,5,0,1,0,62,0,4,0,0,1,0,1,0,5,0,1,0,63,0,4,0,0,1,0,1,0,5,0,1,0,7,0,4,0,0,1,0,1,0,5,0,1,0,7,0,4,0,0,1,0,1,0,5,0,1,0,7,0,4,0,0,1,0,1,0,5,0,1,0,7,0,4,0,0,1,0,1,0,5,0,1,0,7,0,4,0,0,1,0,1,0,5,0,1,0,7,0,4,0,0,1,0,1,0,5,0,1,0,7,0,4,0,0,1,0,1,0,5,0,0,16,0,64,0,65,0,11,0,11,0,11,0,11,26,26,0,0,0,0,16,0,1,0,1,0,0,0,0,7,0,27,27,9,6,10,0,0,17,17,9,6,10,0,21,21,21,66,67,0,0,28,28,9,6,10,0,0,6,6,9,6,10,0,68,0,69,0,0,70,9,6,10,0,29,29,71,72,73,0,30,0,74,0,30,75,76,77,0,0,22,22,78,79,22,80,31,32,81,32,82,33,83,33,84,34,85,86,87,88,89,23,35,12,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,34,31,0,90,91,92,1,1,1,1,4,1,1,1,1]],[[{"name":"settingsUI","rect":[0,137,512,749],"offset":[0,0.5],"originalSize":[512,1024],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[93]],[[{"name":"LeaderBoardBG","rect":[3,3,512,512],"offset":[0,0],"originalSize":[512,512],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[8]],[[{"name":"profilePicDefault","rect":[521,1039,128,128],"offset":[0,0],"originalSize":[128,128],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[8]],[[{"name":"FixedCross","rect":[0,0,512,512],"offset":[0,0],"originalSize":[512,512],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[94]],[[[22,"2dCloudMaterial",[{},"0",11,[{"defines":{"USE_DIFFUSE_TEXTURE":true}},"props",11,[{},"diffuseColor",8,[4,4291818751],"diffuseTexture",6,0]]]]],0,0,[0,0],[11,6],[95,13]],[[[12,".bin",[[13,221,[14,7072],[[3,"a_normal",5126,3],[3,"a_position",5126,3],[3,"a_uv0",5126,2]]]],[[16,[0],[15,7072,2304]]],[1,-0.0207807365804911,-0.00177000276744366,-0.00425767851993442],[1,0.0207807384431362,0.00177000055555254,0.0192499998956919]],-1],0,0,[],[],[]],[[[199,"Obstacle3",2],[40,"Obstacle3",true,2,[-9,-10,-11,-12],[[33,true,-2,[1,0,0,0.4],[1,2,2,0.2]],[47,false,-4,-3,2],[46,false,-5,[1,-0.05,0,-1.2],[1,3.55,3,0.6]],[46,false,-6,[1,1.35,0,0],[1,0.35,3,0.6]],[46,false,-7,[1,0,1.35,0],[1,3,0.35,0.6]],[46,false,-8,[1,0,-1.35,0],[1,3,0.35,0.6]]],[19,-1],[0,0,50,0,0,0,1,6,6,6]],[44,"Obstacle_SQUIRE",true,2,1,[[5,-13,[0],1]],[0,"Obstacle_SQUIRE",1],[0,0,0,-0.7071068286895765,0,0,0.7071067336835153,100,100,100],[1,-90.00000769819565,0,0]],[17,"Colliders copy",true,1,[[7,-14,[1,0,-0.9,0],[1,3.063,0.418,0.35]]],[0,"f502erahtOV6nCpLf5T+GZ",1]],[45,"Colliders copy",true,1,[[7,-15,[1,0.86,0,0],[1,0.4,3,0.35]]],[0,"54MDEChWdJFIWa0psXgQ8u",1],[0,0,0,0,0,0.25881904510252074,0.9659258262890683,1,1,1],[1,0,0,30]],[45,"Colliders copy",true,1,[[7,-16,[1,-0.86,0,0],[1,0.4,3,0.35]]],[0,"faDKM2ewRG8ZBz7z6Sq6QB",1],[0,0,0,0,0,-0.25881904510252074,0.9659258262890683,1,1,1],[1,0,0,-30]]],0,[0,7,1,0,0,1,0,14,2,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,0,2,0,0,3,0,0,4,0,0,5,0,16,1,16],[0,0,0],[-1,4,15],[24,96,12]],[[{"name":"settingsButton","rect":[4,4,504,508],"offset":[0,-2],"originalSize":[512,512],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[97]],[[[12,".bin",[[13,482,[14,15424],[[3,"a_normal",5126,3],[3,"a_position",5126,3],[3,"a_uv0",5126,2]]]],[[16,[0],[15,15424,5760]]],[1,-0.0370220430195332,-0.0385890789330006,-0.0385890975594521],[1,0.040156114846468,0.0385890975594521,0.0385890975594521]],-1],0,0,[],[],[]],[[{"name":"Music","rect":[0,0,512,512],"offset":[0,0],"originalSize":[512,512],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[98]],[[[49,"Obstacle2"],[40,"Obstacle2",true,2,[-5,-6,-7,-8,-9],[[33,true,-2,[1,0,0,0.3],[1,2.5,2.5,0.1]],[47,false,-4,-3,2]],[19,-1],[0,0,63.529,0,0,0,1,6,6,6]],[44,"Obstacle_CIRCLE",true,2,1,[[5,-10,[0],1]],[0,"Obstacle_SQUIRE",1],[0,0,0,-0.7071068286895765,0,0,0.7071067336835153,100,100,100],[1,-90.00000769819565,0,0]],[17,"Colliders",true,1,[[7,-11,[1,0,1.45,-0.1],[1,2.063,0.218,0.35]]],[0,"68ElFupglHAp+vcio6NhRt",1]],[17,"Colliders copy",true,1,[[7,-12,[1,0,-1.5,-0.1],[1,2.263,0.318,0.35]]],[0,"f502erahtOV6nCpLf5T+GZ",1]],[17,"Colliders copy",true,1,[[7,-13,[1,1.48,0,-0.1],[1,0.23,2,0.35]]],[0,"54MDEChWdJFIWa0psXgQ8u",1]],[17,"Colliders copy",true,1,[[7,-14,[1,-1.46,0,-0.1],[1,0.3,2.1,0.35]]],[0,"faDKM2ewRG8ZBz7z6Sq6QB",1]]],0,[0,7,1,0,0,1,0,14,2,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,-5,6,0,0,2,0,0,3,0,0,4,0,0,5,0,0,6,0,16,1,14],[0,0,0],[-1,4,15],[23,35,12]],[[{"name":"First","rect":[3,1001,512,367],"offset":[0,0.5],"originalSize":[512,512],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[8]],[[[36,"Button Click",".mp3",0.089454],-1],0,0,[],[],[]],[[[22,"PlaneDefaultMaterial",[{},"0",11,[{"defines":{"USE_ALPHA_TEST":false,"USE_DIFFUSE_TEXTURE":false,"OUTPUT_TO_GAMMA":false}},"props",11,[{"alphaThreshold":-13.899999999999944},"diffuseColor",8,[4,4288075504],"diffuseTexture",6,0]]]]],0,0,[0,0],[11,6],[25,15]],[[{"name":"playWithFriendsSprite","rect":[0,0,512,512],"offset":[0,0],"originalSize":[512,512],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[99]],[[{"name":"SoundMute","rect":[0,0,512,512],"offset":[0,0],"originalSize":[512,512],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[100]],[[[12,".bin",[[13,299,[14,9568],[[3,"a_normal",5126,3],[3,"a_position",5126,3],[3,"a_uv0",5126,2]]]],[[16,[0],[15,9568,3168]]],[1,-0.0167180839926004,-0.00164000270888209,-0.016890000551939],[1,0.0167180858552456,0.00164000259246677,0.016890000551939]],-1],0,0,[],[],[]],[[{"name":"FixedLeaderBoard","rect":[3,521,512,474],"offset":[0,0],"originalSize":[512,512],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[8]],[[[12,".bin",[[13,264,[14,8448],[[3,"a_normal",5126,3],[3,"a_position",5126,3],[3,"a_uv0",5126,2]]]],[[16,[0],[15,8448,1296]]],[1,-0.3182353079319,-0.00204068212769926,-0.0266599059104919],[1,0.402611762285233,0.0963960736989975,0.0317812040448189]],-1],0,0,[],[],[]],[[{"name":"Replay","rect":[0,0,512,512],"offset":[0,0],"originalSize":[512,512],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[101]],[[{"name":"settingsButtonHover","rect":[4,4,504,508],"offset":[0,-2],"originalSize":[512,512],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[102]],[[[12,".bin",[[13,78,[14,2496],[[3,"a_normal",5126,3],[3,"a_position",5126,3],[3,"a_uv0",5126,2]]]],[[16,[0],[15,2496,720]]],[1,-0.0184504967182875,-0.00240000267513096,-0.0156949292868376],[1,0.0184504948556423,0.00240000220946968,0.0194000005722046]],-1],0,0,[],[],[]],[[[56,"paperBurstMat",3,[{},"0",11,[{"defines":{}},"props",11,[{},"mainTexture",6,0]]]]],0,0,[0,0],[18,6],[103,18]],[[{"name":"default_panel","rect":[0,0,20,20],"offset":[0,0],"originalSize":[20,20],"capInsets":[6,6,6,6]}],[1],0,[0],[3],[104]],[[{"name":"FixedScore","rect":[917,3,512,100],"offset":[0,0],"originalSize":[512,128],"rotated":1,"capInsets":[0,0,0,0]}],[1],0,[0],[3],[8]],[[[12,".bin",[[13,121,[14,3872],[[3,"a_normal",5126,3],[3,"a_position",5126,3],[3,"a_uv0",5126,2]]]],[[16,[0],[15,3872,1200]]],[1,-5,0,-5],[1,5,0,5]],-1],0,0,[],[],[]],[[[49,"Obstacle6"],[65,"Obstacle6",true,[-5,-6,-7,-8,-9],[[33,true,-2,[1,0,0.7,0.3],[1,3.477,1.8,0.105]],[73,-4,-3,2]],[19,-1],[0,0,51.446,0,0,0,1,6,6,6]],[45,"Obstacle_HalfOVAL",true,1,[[5,-10,[0],1]],[0,"Obstacle_HalfOVAL",1],[0,0,0,-0.7071068286895765,0,0,0.7071067336835153,100,100,100],[1,-90.00000769819565,0,0]],[28,"Colliders",true,2,1,[[7,-11,[1,0,1.7,0],[1,3.063,0.418,0.35]]],[0,"72GP/HSDBLDrpOXaMzbphu",1]],[28,"Colliders copy",true,2,1,[[7,-12,[1,0,-0.2,0],[1,3.663,0.418,0.25]]],[0,"038sqwUrdC1aw4hKMbvozS",1]],[28,"Colliders copy",true,2,1,[[7,-13,[1,1.86,0.6,0],[1,0.4,1.8,0.35]]],[0,"89s/2NgWRJ/odQMQs5X9Yo",1]],[28,"Colliders copy",true,2,1,[[7,-14,[1,-1.86,0.6,0],[1,0.4,1.8,0.35]]],[0,"a5qJfy5W1HlIlAPoooJmgL",1]]],0,[0,7,1,0,0,1,0,14,2,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,-5,6,0,0,2,0,0,3,0,0,4,0,0,5,0,0,6,0,16,1,14],[0,0,0],[-1,4,15],[24,105,12]],[[[22,"windParticle",[{},"0",11,[{"defines":{}},"props",11,[{},"mainTexture",6,0]]]]],0,0,[0,0],[18,6],[106,18]],[[{"name":"shareGreyscale","rect":[0,0,512,512],"offset":[0,0],"originalSize":[512,512],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[107]],[[[22,"sunMaterial",[{},"0",11,[{"defines":{"USE_DIFFUSE_TEXTURE":true}},"props",11,[{},"diffuseTexture",6,0]]]]],0,0,[0,0],[11,6],[108,13]],[[[87,"builtin-phong",[{"hash":3560892936,"record":null,"name":"builtin-phong|phong-vs|phong-fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n#if CC_USE_SKINNING\n  in vec4 a_weights;\n  in vec4 a_joints;\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform SKINNING {\n      vec2 jointsTextureSize;\n    };\n    uniform sampler2D jointsTexture;\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = texture(jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture(jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture(jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture(jointsTexture, vec2(dx * (x + 3.5), y));\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture(jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform JOINT_MATRIX {\n      mat4 jointMatrices[50];\n    };\n    mat4 getBoneMatrix(const in float i) {\n      return jointMatrices[int(i)];\n    }\n  #endif\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\nstruct StandardVertInput {\n  vec2 uv;\n  vec4 position;\n  vec3 normal;\n  vec4 tangent;\n  vec4 color;\n};\nin vec3 a_position;\n#if CC_USE_ATTRIBUTE_UV0\nin vec2 a_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\nin vec4 a_color;\n#endif\n#if CC_USE_ATTRIBUTE_NORMAL\nin vec3 a_normal;\n#endif\n#if CC_USE_ATTRIBUTE_TANGENT\nin vec4 a_tangent;\n#endif\nvoid CCAttribute (out StandardVertInput In) {\n  In.position = vec4(a_position, 1.0);\n  #if CC_USE_ATTRIBUTE_UV0\n    In.uv = a_uv0;\n  #else\n    In.uv = vec2(0.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_COLOR\n    In.color = a_color;\n  #else\n    In.color = vec4(1.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_NORMAL\n    In.normal = a_normal;\n  #else\n    In.normal = vec3(0.0, 1.0, 0.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_TANGENT\n    In.tangent = a_tangent;\n  #else\n    In.tangent = vec4(1.0, 0.0, 0.0, 0.0);\n  #endif\n}\nvoid CCVertInput(out StandardVertInput In) {\n  CCAttribute(In);\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    In.position = m * In.position;\n    #if CC_USE_ATTRIBUTE_NORMAL\n      In.normal = (m * vec4(In.normal, 0)).xyz;\n    #endif\n    #if CC_USE_ATTRIBUTE_TANGENT\n      In.tangent = m * In.tangent;\n    #endif\n  #endif\n}\n#if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  uniform CC_SHADOW {\n    mat4 cc_shadow_lightViewProjMatrix[2];\n    vec4 cc_shadow_info[2];\n  };\n  #if CC_NUM_SHADOW_LIGHTS > 0\n    uniform sampler2D cc_shadow_map_0;\n  #endif\n  #if CC_NUM_SHADOW_LIGHTS > 1\n    uniform sampler2D cc_shadow_map_1;\n  #endif\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\nvoid CCShadowInput (vec3 worldPos) {\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  for (int i = 0; i < CC_NUM_SHADOW_LIGHTS; i++) {\n    v_posLightSpace[i] = cc_shadow_lightViewProjMatrix[i] * vec4(worldPos, 1.0);\n    v_depth[i] = (v_posLightSpace[i].z + cc_shadow_info[i].x) / (cc_shadow_info[i].x + cc_shadow_info[i].y);\n  }\n  #endif\n}\nuniform MAIN_TILING {\n  vec2 mainTiling;\n  vec2 mainOffset;\n};\n#if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE || USE_SPECULAR_TEXTURE || USE_NORMAL_TEXTURE)\n  out mediump vec2 v_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\n  out lowp vec4 v_color;\n#endif\n#if USE_NORMAL_TEXTURE\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\nout vec3 v_worldNormal;\nout vec3 v_worldPos;\nout vec3 v_viewDirection;\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  vec4 position = In.position;\n  v_worldNormal = normalize((cc_matWorldIT * vec4(In.normal, 0)).xyz);\n  v_worldPos = (cc_matWorld * position).xyz;\n  v_viewDirection = normalize(cc_cameraPos.xyz - v_worldPos);\n  #if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE || USE_SPECULAR_TEXTURE || USE_NORMAL_TEXTURE)\n    v_uv0 = In.uv * mainTiling + mainOffset;\n  #endif\n  #if CC_USE_ATTRIBUTE_COLOR\n    v_color = In.color;\n  #endif\n  #if USE_NORMAL_TEXTURE\n    v_tangent = normalize((cc_matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_worldNormal, v_tangent) * In.tangent.w;\n  #endif\n  CCShadowInput(v_worldPos);\n  gl_Position = cc_matViewProj * cc_matWorld * position;\n}","frag":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nvec4 CCFragOutput (vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    color.rgb = sqrt(color.rgb);\n  #endif\n\treturn color;\n}\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform PhongFrag {\n  lowp vec4 diffuseColor;\n  lowp vec4 specularColor;\n  lowp vec4 emissiveColor;\n  float glossiness;\n};\n#if USE_DIFFUSE_TEXTURE\n  uniform sampler2D diffuseTexture;\n#endif\n#if USE_SPECULAR && USE_SPECULAR_TEXTURE\n  uniform sampler2D specularTexture;\n#endif\n#if USE_EMISSIVE && USE_EMISSIVE_TEXTURE\n  uniform sampler2D emissiveTexture;\n#endif\n#if USE_NORMAL_TEXTURE\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalTexture;\n#endif\nin vec3 v_worldNormal;\nin vec3 v_worldPos;\nin vec3 v_viewDirection;\n#if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || (USE_EMISSIVE && USE_EMISSIVE_TEXTURE) || (USE_SPECULAR && USE_SPECULAR_TEXTURE) || USE_NORMAL_TEXTURE)\n  in mediump vec2 v_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\n  in lowp vec4 v_color;\n#endif\n#if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  uniform CC_SHADOW {\n    mat4 cc_shadow_lightViewProjMatrix[2];\n    vec4 cc_shadow_info[2];\n  };\n  #if CC_NUM_SHADOW_LIGHTS > 0\n    uniform sampler2D cc_shadow_map_0;\n  #endif\n  #if CC_NUM_SHADOW_LIGHTS > 1\n    uniform sampler2D cc_shadow_map_1;\n  #endif\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\nfloat getDepth(sampler2D shadowMap, vec2 shadowUV) {\n    return unpackRGBAToDepth(texture(shadowMap, shadowUV));\n}\nfloat computeFallOff(float shadow, vec2 coords, float frustumEdgeFalloff) {\n  return shadow;\n}\nfloat shadowSimple(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness) {\n  float closestDepth = getDepth(shadowMap, shadowUV);\n  return currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n}\nfloat shadowPCF3X3(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness, float shadowSize) {\n  float shadow = 0.0;\n  for (int x = -1; x <= 1; ++x) {\n    for (int y = -1; y <= 1; ++y) {\n      float closestDepth = getDepth(shadowMap, shadowUV + vec2(x, y) * 1.0/shadowSize);\n      shadow += currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n    }\n  }\n  shadow /= 9.0;\n  return shadow;\n}\nfloat shadowPCF5X5(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness, float shadowSize) {\n  float shadow = 0.0;\n  for (int x = -2; x <= 2; ++x) {\n    for (int y = -2; y <= 2; ++y) {\n      float closestDepth = getDepth(shadowMap, shadowUV + vec2(x, y) * 1.0/shadowSize);\n      shadow += currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n    }\n  }\n  shadow /= 25.0;\n  return shadow;\n}\n#if CC_NUM_LIGHTS > 0\nuniform CCLIGHTS {\n  vec4 cc_lightPositionAndRange[4];\n  vec4 cc_lightDirection[4];\n  vec4 cc_lightColor[4];\n};\n#endif\nstruct LightInfo {\n  vec3 lightDir;\n  vec3 radiance;\n  vec4 lightColor;\n};\nLightInfo computeDirectionalLighting(\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  ret.lightDir = -normalize(lightDirection.xyz);\n  ret.radiance = lightColor.rgb;\n  ret.lightColor = lightColor;\n  return ret;\n}\nLightInfo computePointLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  ret.lightDir = normalize(lightDir);\n  ret.radiance = lightColor.rgb * attenuation;\n  ret.lightColor = lightColor;\n  return ret;\n}\nLightInfo computeSpotLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  lightDir = normalize(lightDir);\n  float cosConeAngle = max(0., dot(lightDirection.xyz, -lightDir));\n  cosConeAngle = cosConeAngle < lightDirection.w ? 0. : cosConeAngle;\n  cosConeAngle = pow(cosConeAngle, lightColor.w);\n  ret.lightDir = lightDir;\n  ret.radiance = lightColor.rgb * attenuation * cosConeAngle;\n  ret.lightColor = lightColor;\n  return ret;\n}\nstruct Lighting {\n  vec3 diffuse;\n  vec3 specular;\n};\nstruct PhongSurface {\n  vec3 diffuse;\n  vec3 emissive;\n  vec3 specular;\n  float opacity;\n  float glossiness;\n  vec3 position;\n  vec3 normal;\n  vec3 viewDirection;\n};\nLighting brdf (PhongSurface s, LightInfo info) {\n  Lighting result;\n  float ndh = 0.0;\n  vec3 halfDir = normalize(s.viewDirection + info.lightDir);\n  float NdotH = max(0.0, dot(s.normal, halfDir));\n  NdotH = pow(NdotH, max(1.0, s.glossiness * 128.0));\n  result.diffuse = info.radiance * max(0.0, dot(s.normal, info.lightDir));\n  result.specular = info.radiance * NdotH;\n  return result;\n}\nvec4 composePhongShading (Lighting lighting, PhongSurface s) {\n  vec4 o = vec4(0.0, 0.0, 0.0, 1.0);\n  o.rgb = lighting.diffuse * s.diffuse;\n  #if USE_EMISSIVE\n    o.rgb += s.emissive;\n  #endif\n  #if USE_SPECULAR\n    o.rgb += lighting.specular * s.specular;\n  #endif\n  o.a = s.opacity;\n  return o;\n}\nvec3 ambient(PhongSurface s, vec4 ambientColor) {\n  return s.diffuse * ambientColor.rgb;\n}\nvec4 CCPhongShading (in PhongSurface s) {\n  Lighting result;\n  result.diffuse = vec3(0, 0, 0);\n  result.specular = vec3(0, 0, 0);\n  #if CC_NUM_LIGHTS > 0\n    #if CC_LIGHT_0_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[0]);\n    #else\n      LightInfo info0;\n      #if CC_LIGHT_0_TYPE == 0\n        info0 = computeDirectionalLighting(cc_lightDirection[0], cc_lightColor[0]);\n      #elif CC_LIGHT_0_TYPE == 1\n        info0 = computePointLighting(s.position, cc_lightPositionAndRange[0], cc_lightColor[0]);\n      #elif CC_LIGHT_0_TYPE == 2\n        info0 = computeSpotLighting(s.position, cc_lightPositionAndRange[0], cc_lightDirection[0], cc_lightColor[0]);\n      #endif\n      Lighting result0 = brdf(s, info0);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n    float shadow_0 = 1.0;\n    vec2 projCoords0 = v_posLightSpace[0].xy / v_posLightSpace[0].w;\n    vec2 shadowUV0 = projCoords0 * 0.5 + vec2(0.5);\n    if (shadowUV0.x >= 0.0 && shadowUV0.x <= 1.0 && shadowUV0.y >= 0.0 && shadowUV0.y <= 1.0) {\n      float currentDepth0 = clamp(v_depth[0], 0.0, 1.0);\n      #if CC_SHADOW_0_TYPE == 3\n        shadow_0 = shadowPCF3X3(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w, cc_shadow_info[0].z);\n      #elif CC_SHADOW_0_TYPE == 4\n        shadow_0 = shadowPCF5X5(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w, cc_shadow_info[0].z);\n      #else\n        shadow_0 = shadowSimple(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w);\n      #endif\n      shadow_0 = computeFallOff(shadow_0, projCoords0, 0.0);\n    }\n    result0.diffuse *= shadow_0;\n    result0.specular *= shadow_0;\n  #endif\n      result.diffuse += result0.diffuse;\n      result.specular += result0.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 1\n    #if CC_LIGHT_1_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[1]);\n    #else\n      LightInfo info1;\n      #if CC_LIGHT_1_TYPE == 0\n        info1 = computeDirectionalLighting(cc_lightDirection[1], cc_lightColor[1]);\n      #elif CC_LIGHT_1_TYPE == 1\n        info1 = computePointLighting(s.position, cc_lightPositionAndRange[1], cc_lightColor[1]);\n      #elif CC_LIGHT_1_TYPE == 2\n        info1 = computeSpotLighting(s.position, cc_lightPositionAndRange[1], cc_lightDirection[1], cc_lightColor[1]);\n      #endif\n      Lighting result1 = brdf(s, info1);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 1\n    float shadow_1 = 1.0;\n    vec2 projCoords1 = v_posLightSpace[1].xy / v_posLightSpace[1].w;\n    vec2 shadowUV1 = projCoords1 * 0.5 + vec2(0.5);\n    if (shadowUV1.x >= 0.0 && shadowUV1.x <= 1.0 && shadowUV1.y >= 0.0 && shadowUV1.y <= 1.0) {\n      float currentDepth1 = clamp(v_depth[1], 0.0, 1.0);\n      #if CC_SHADOW_1_TYPE == 3\n        shadow_1 = shadowPCF3X3(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w, cc_shadow_info[1].z);\n      #elif CC_SHADOW_1_TYPE == 4\n        shadow_1 = shadowPCF5X5(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w, cc_shadow_info[1].z);\n      #else\n        shadow_1 = shadowSimple(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w);\n      #endif\n      shadow_1 = computeFallOff(shadow_1, projCoords1, 0.0);\n    }\n    result1.diffuse *= shadow_1;\n    result1.specular *= shadow_1;\n  #endif\n      result.diffuse += result1.diffuse;\n      result.specular += result1.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 2\n    #if CC_LIGHT_2_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[2]);\n    #else\n      LightInfo info2;\n      #if CC_LIGHT_2_TYPE == 0\n        info2 = computeDirectionalLighting(cc_lightDirection[2], cc_lightColor[2]);\n      #elif CC_LIGHT_2_TYPE == 1\n        info2 = computePointLighting(s.position, cc_lightPositionAndRange[2], cc_lightColor[2]);\n      #elif CC_LIGHT_2_TYPE == 2\n        info2 = computeSpotLighting(s.position, cc_lightPositionAndRange[2], cc_lightDirection[2], cc_lightColor[2]);\n      #endif\n      Lighting result2 = brdf(s, info2);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 2\n    float shadow_2 = 1.0;\n    vec2 projCoords2 = v_posLightSpace[2].xy / v_posLightSpace[2].w;\n    vec2 shadowUV2 = projCoords2 * 0.5 + vec2(0.5);\n    if (shadowUV2.x >= 0.0 && shadowUV2.x <= 1.0 && shadowUV2.y >= 0.0 && shadowUV2.y <= 1.0) {\n      float currentDepth2 = clamp(v_depth[2], 0.0, 1.0);\n      #if CC_SHADOW_2_TYPE == 3\n        shadow_2 = shadowPCF3X3(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w, cc_shadow_info[2].z);\n      #elif CC_SHADOW_2_TYPE == 4\n        shadow_2 = shadowPCF5X5(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w, cc_shadow_info[2].z);\n      #else\n        shadow_2 = shadowSimple(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w);\n      #endif\n      shadow_2 = computeFallOff(shadow_2, projCoords2, 0.0);\n    }\n    result2.diffuse *= shadow_2;\n    result2.specular *= shadow_2;\n  #endif\n      result.diffuse += result2.diffuse;\n      result.specular += result2.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 3\n    #if CC_LIGHT_3_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[3]);\n    #else\n      LightInfo info3;\n      #if CC_LIGHT_3_TYPE == 0\n        info3 = computeDirectionalLighting(cc_lightDirection[3], cc_lightColor[3]);\n      #elif CC_LIGHT_3_TYPE == 1\n        info3 = computePointLighting(s.position, cc_lightPositionAndRange[3], cc_lightColor[3]);\n      #elif CC_LIGHT_3_TYPE == 2\n        info3 = computeSpotLighting(s.position, cc_lightPositionAndRange[3], cc_lightDirection[3], cc_lightColor[3]);\n      #endif\n      Lighting result3 = brdf(s, info3);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 3\n    float shadow_3 = 1.0;\n    vec2 projCoords3 = v_posLightSpace[3].xy / v_posLightSpace[3].w;\n    vec2 shadowUV3 = projCoords3 * 0.5 + vec2(0.5);\n    if (shadowUV3.x >= 0.0 && shadowUV3.x <= 1.0 && shadowUV3.y >= 0.0 && shadowUV3.y <= 1.0) {\n      float currentDepth3 = clamp(v_depth[3], 0.0, 1.0);\n      #if CC_SHADOW_3_TYPE == 3\n        shadow_3 = shadowPCF3X3(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w, cc_shadow_info[3].z);\n      #elif CC_SHADOW_3_TYPE == 4\n        shadow_3 = shadowPCF5X5(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w, cc_shadow_info[3].z);\n      #else\n        shadow_3 = shadowSimple(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w);\n      #endif\n      shadow_3 = computeFallOff(shadow_3, projCoords3, 0.0);\n    }\n    result3.diffuse *= shadow_3;\n    result3.specular *= shadow_3;\n  #endif\n      result.diffuse += result3.diffuse;\n      result.specular += result3.specular;\n    #endif\n  #endif\n  return composePhongShading(result, s);\n}\nvoid surf (out PhongSurface s) {\n  vec4 diffuse = vec4(1, 1, 1, 1);\n  #if CC_USE_ATTRIBUTE_COLOR\n    diffuse *= v_color;\n  #endif\n  diffuse *= diffuseColor;\n  #if USE_DIFFUSE_TEXTURE\n  vec4 diffuseTexture_tmp = texture(diffuseTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_diffuseTexture\n      diffuseTexture_tmp.a *= texture(diffuseTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    diffuse.rgb *= (diffuseTexture_tmp.rgb * diffuseTexture_tmp.rgb);\n    diffuse.a *= diffuseTexture_tmp.a;\n  #else\n    diffuse *= diffuseTexture_tmp;\n  #endif\n  #endif\n  ALPHA_TEST(diffuse);\n  s.diffuse = diffuse.rgb;\n  s.opacity = diffuse.a;\n  #if USE_EMISSIVE\n    s.emissive = emissiveColor.rgb;\n    #if USE_EMISSIVE_TEXTURE\n  vec4 emissiveTexture_tmp = texture(emissiveTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_emissiveTexture\n      emissiveTexture_tmp.a *= texture(emissiveTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    s.emissive.rgb *= (emissiveTexture_tmp.rgb * emissiveTexture_tmp.rgb);\n  #else\n    s.emissive.rgb *= emissiveTexture_tmp.rgb;\n  #endif\n    #endif\n  #endif\n  #if USE_SPECULAR\n    s.specular = specularColor.rgb;\n    #if USE_SPECULAR_TEXTURE\n  vec4 specularTexture_tmp = texture(specularTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_specularTexture\n      specularTexture_tmp.a *= texture(specularTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    s.specular.rgb *= (specularTexture_tmp.rgb * specularTexture_tmp.rgb);\n  #else\n    s.specular.rgb *= specularTexture_tmp.rgb;\n  #endif\n    #endif\n  #endif\n  s.normal = v_worldNormal;\n  #if USE_NORMAL_TEXTURE\n    vec3 nmmp = texture(normalTexture, v_uv0).xyz - vec3(0.5);\n    s.normal =\n      nmmp.x * normalize(v_tangent) +\n      nmmp.y * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n    s.normal = normalize(s.normal);\n  #endif\n  s.position = v_worldPos;\n  s.viewDirection = v_viewDirection;\n  s.glossiness = glossiness;\n}\nvoid main () {\n  PhongSurface s;\n  surf(s);\n  vec4 color = CCPhongShading(s);\n  gl_FragColor = CCFragOutput(color);\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matWorld;\nuniform mat4 cc_matWorldIT;\nuniform mat4 cc_matViewProj;\nuniform vec4 cc_cameraPos;\n#if CC_USE_SKINNING\n  attribute vec4 a_weights;\n  attribute vec4 a_joints;\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform vec2 jointsTextureSize;\n    uniform sampler2D jointsTexture;\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = texture2D(jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture2D(jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture2D(jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture2D(jointsTexture, vec2(dx * (x + 3.5), y));\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture2D(jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform mat4 jointMatrices[50];\n    mat4 getBoneMatrix(const in float i) {\n      return jointMatrices[int(i)];\n    }\n  #endif\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\nstruct StandardVertInput {\n  vec2 uv;\n  vec4 position;\n  vec3 normal;\n  vec4 tangent;\n  vec4 color;\n};\nattribute vec3 a_position;\n#if CC_USE_ATTRIBUTE_UV0\nattribute vec2 a_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\nattribute vec4 a_color;\n#endif\n#if CC_USE_ATTRIBUTE_NORMAL\nattribute vec3 a_normal;\n#endif\n#if CC_USE_ATTRIBUTE_TANGENT\nattribute vec4 a_tangent;\n#endif\nvoid CCAttribute (out StandardVertInput In) {\n  In.position = vec4(a_position, 1.0);\n  #if CC_USE_ATTRIBUTE_UV0\n    In.uv = a_uv0;\n  #else\n    In.uv = vec2(0.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_COLOR\n    In.color = a_color;\n  #else\n    In.color = vec4(1.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_NORMAL\n    In.normal = a_normal;\n  #else\n    In.normal = vec3(0.0, 1.0, 0.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_TANGENT\n    In.tangent = a_tangent;\n  #else\n    In.tangent = vec4(1.0, 0.0, 0.0, 0.0);\n  #endif\n}\nvoid CCVertInput(out StandardVertInput In) {\n  CCAttribute(In);\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    In.position = m * In.position;\n    #if CC_USE_ATTRIBUTE_NORMAL\n      In.normal = (m * vec4(In.normal, 0)).xyz;\n    #endif\n    #if CC_USE_ATTRIBUTE_TANGENT\n      In.tangent = m * In.tangent;\n    #endif\n  #endif\n}\n#if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  uniform mat4 cc_shadow_lightViewProjMatrix[2];\nuniform vec4 cc_shadow_info[2];\n  #if CC_NUM_SHADOW_LIGHTS > 0\n    uniform sampler2D cc_shadow_map_0;\n  #endif\n  #if CC_NUM_SHADOW_LIGHTS > 1\n    uniform sampler2D cc_shadow_map_1;\n  #endif\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\nvoid CCShadowInput (vec3 worldPos) {\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  for (int i = 0; i < CC_NUM_SHADOW_LIGHTS; i++) {\n    v_posLightSpace[i] = cc_shadow_lightViewProjMatrix[i] * vec4(worldPos, 1.0);\n    v_depth[i] = (v_posLightSpace[i].z + cc_shadow_info[i].x) / (cc_shadow_info[i].x + cc_shadow_info[i].y);\n  }\n  #endif\n}\nuniform vec2 mainTiling;\nuniform vec2 mainOffset;\n#if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE || USE_SPECULAR_TEXTURE || USE_NORMAL_TEXTURE)\n  varying mediump vec2 v_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if USE_NORMAL_TEXTURE\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\nvarying vec3 v_worldNormal;\nvarying vec3 v_worldPos;\nvarying vec3 v_viewDirection;\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  vec4 position = In.position;\n  v_worldNormal = normalize((cc_matWorldIT * vec4(In.normal, 0)).xyz);\n  v_worldPos = (cc_matWorld * position).xyz;\n  v_viewDirection = normalize(cc_cameraPos.xyz - v_worldPos);\n  #if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE || USE_SPECULAR_TEXTURE || USE_NORMAL_TEXTURE)\n    v_uv0 = In.uv * mainTiling + mainOffset;\n  #endif\n  #if CC_USE_ATTRIBUTE_COLOR\n    v_color = In.color;\n  #endif\n  #if USE_NORMAL_TEXTURE\n    v_tangent = normalize((cc_matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_worldNormal, v_tangent) * In.tangent.w;\n  #endif\n  CCShadowInput(v_worldPos);\n  gl_Position = cc_matViewProj * cc_matWorld * position;\n}","frag":"\nprecision highp float;\nvec4 CCFragOutput (vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    color.rgb = sqrt(color.rgb);\n  #endif\n\treturn color;\n}\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform lowp vec4 diffuseColor;\nuniform lowp vec4 specularColor;\nuniform lowp vec4 emissiveColor;\nuniform float glossiness;\n#if USE_DIFFUSE_TEXTURE\n  uniform sampler2D diffuseTexture;\n#endif\n#if USE_SPECULAR && USE_SPECULAR_TEXTURE\n  uniform sampler2D specularTexture;\n#endif\n#if USE_EMISSIVE && USE_EMISSIVE_TEXTURE\n  uniform sampler2D emissiveTexture;\n#endif\n#if USE_NORMAL_TEXTURE\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalTexture;\n#endif\nvarying vec3 v_worldNormal;\nvarying vec3 v_worldPos;\nvarying vec3 v_viewDirection;\n#if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || (USE_EMISSIVE && USE_EMISSIVE_TEXTURE) || (USE_SPECULAR && USE_SPECULAR_TEXTURE) || USE_NORMAL_TEXTURE)\n  varying mediump vec2 v_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  uniform vec4 cc_shadow_info[2];\n  #if CC_NUM_SHADOW_LIGHTS > 0\n    uniform sampler2D cc_shadow_map_0;\n  #endif\n  #if CC_NUM_SHADOW_LIGHTS > 1\n    uniform sampler2D cc_shadow_map_1;\n  #endif\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\nfloat getDepth(sampler2D shadowMap, vec2 shadowUV) {\n    return unpackRGBAToDepth(texture2D(shadowMap, shadowUV));\n}\nfloat computeFallOff(float shadow, vec2 coords, float frustumEdgeFalloff) {\n  return shadow;\n}\nfloat shadowSimple(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness) {\n  float closestDepth = getDepth(shadowMap, shadowUV);\n  return currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n}\nfloat shadowPCF3X3(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness, float shadowSize) {\n  float shadow = 0.0;\n  for (int x = -1; x <= 1; ++x) {\n    for (int y = -1; y <= 1; ++y) {\n      float closestDepth = getDepth(shadowMap, shadowUV + vec2(x, y) * 1.0/shadowSize);\n      shadow += currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n    }\n  }\n  shadow /= 9.0;\n  return shadow;\n}\nfloat shadowPCF5X5(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness, float shadowSize) {\n  float shadow = 0.0;\n  for (int x = -2; x <= 2; ++x) {\n    for (int y = -2; y <= 2; ++y) {\n      float closestDepth = getDepth(shadowMap, shadowUV + vec2(x, y) * 1.0/shadowSize);\n      shadow += currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n    }\n  }\n  shadow /= 25.0;\n  return shadow;\n}\n#if CC_NUM_LIGHTS > 0\nuniform vec4 cc_lightPositionAndRange[4];\nuniform vec4 cc_lightDirection[4];\nuniform vec4 cc_lightColor[4];\n#endif\nstruct LightInfo {\n  vec3 lightDir;\n  vec3 radiance;\n  vec4 lightColor;\n};\nLightInfo computeDirectionalLighting(\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  ret.lightDir = -normalize(lightDirection.xyz);\n  ret.radiance = lightColor.rgb;\n  ret.lightColor = lightColor;\n  return ret;\n}\nLightInfo computePointLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  ret.lightDir = normalize(lightDir);\n  ret.radiance = lightColor.rgb * attenuation;\n  ret.lightColor = lightColor;\n  return ret;\n}\nLightInfo computeSpotLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  lightDir = normalize(lightDir);\n  float cosConeAngle = max(0., dot(lightDirection.xyz, -lightDir));\n  cosConeAngle = cosConeAngle < lightDirection.w ? 0. : cosConeAngle;\n  cosConeAngle = pow(cosConeAngle, lightColor.w);\n  ret.lightDir = lightDir;\n  ret.radiance = lightColor.rgb * attenuation * cosConeAngle;\n  ret.lightColor = lightColor;\n  return ret;\n}\nstruct Lighting {\n  vec3 diffuse;\n  vec3 specular;\n};\nstruct PhongSurface {\n  vec3 diffuse;\n  vec3 emissive;\n  vec3 specular;\n  float opacity;\n  float glossiness;\n  vec3 position;\n  vec3 normal;\n  vec3 viewDirection;\n};\nLighting brdf (PhongSurface s, LightInfo info) {\n  Lighting result;\n  float ndh = 0.0;\n  vec3 halfDir = normalize(s.viewDirection + info.lightDir);\n  float NdotH = max(0.0, dot(s.normal, halfDir));\n  NdotH = pow(NdotH, max(1.0, s.glossiness * 128.0));\n  result.diffuse = info.radiance * max(0.0, dot(s.normal, info.lightDir));\n  result.specular = info.radiance * NdotH;\n  return result;\n}\nvec4 composePhongShading (Lighting lighting, PhongSurface s) {\n  vec4 o = vec4(0.0, 0.0, 0.0, 1.0);\n  o.rgb = lighting.diffuse * s.diffuse;\n  #if USE_EMISSIVE\n    o.rgb += s.emissive;\n  #endif\n  #if USE_SPECULAR\n    o.rgb += lighting.specular * s.specular;\n  #endif\n  o.a = s.opacity;\n  return o;\n}\nvec3 ambient(PhongSurface s, vec4 ambientColor) {\n  return s.diffuse * ambientColor.rgb;\n}\nvec4 CCPhongShading (in PhongSurface s) {\n  Lighting result;\n  result.diffuse = vec3(0, 0, 0);\n  result.specular = vec3(0, 0, 0);\n  #if CC_NUM_LIGHTS > 0\n    #if CC_LIGHT_0_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[0]);\n    #else\n      LightInfo info0;\n      #if CC_LIGHT_0_TYPE == 0\n        info0 = computeDirectionalLighting(cc_lightDirection[0], cc_lightColor[0]);\n      #elif CC_LIGHT_0_TYPE == 1\n        info0 = computePointLighting(s.position, cc_lightPositionAndRange[0], cc_lightColor[0]);\n      #elif CC_LIGHT_0_TYPE == 2\n        info0 = computeSpotLighting(s.position, cc_lightPositionAndRange[0], cc_lightDirection[0], cc_lightColor[0]);\n      #endif\n      Lighting result0 = brdf(s, info0);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n    float shadow_0 = 1.0;\n    vec2 projCoords0 = v_posLightSpace[0].xy / v_posLightSpace[0].w;\n    vec2 shadowUV0 = projCoords0 * 0.5 + vec2(0.5);\n    if (shadowUV0.x >= 0.0 && shadowUV0.x <= 1.0 && shadowUV0.y >= 0.0 && shadowUV0.y <= 1.0) {\n      float currentDepth0 = clamp(v_depth[0], 0.0, 1.0);\n      #if CC_SHADOW_0_TYPE == 3\n        shadow_0 = shadowPCF3X3(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w, cc_shadow_info[0].z);\n      #elif CC_SHADOW_0_TYPE == 4\n        shadow_0 = shadowPCF5X5(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w, cc_shadow_info[0].z);\n      #else\n        shadow_0 = shadowSimple(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w);\n      #endif\n      shadow_0 = computeFallOff(shadow_0, projCoords0, 0.0);\n    }\n    result0.diffuse *= shadow_0;\n    result0.specular *= shadow_0;\n  #endif\n      result.diffuse += result0.diffuse;\n      result.specular += result0.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 1\n    #if CC_LIGHT_1_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[1]);\n    #else\n      LightInfo info1;\n      #if CC_LIGHT_1_TYPE == 0\n        info1 = computeDirectionalLighting(cc_lightDirection[1], cc_lightColor[1]);\n      #elif CC_LIGHT_1_TYPE == 1\n        info1 = computePointLighting(s.position, cc_lightPositionAndRange[1], cc_lightColor[1]);\n      #elif CC_LIGHT_1_TYPE == 2\n        info1 = computeSpotLighting(s.position, cc_lightPositionAndRange[1], cc_lightDirection[1], cc_lightColor[1]);\n      #endif\n      Lighting result1 = brdf(s, info1);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 1\n    float shadow_1 = 1.0;\n    vec2 projCoords1 = v_posLightSpace[1].xy / v_posLightSpace[1].w;\n    vec2 shadowUV1 = projCoords1 * 0.5 + vec2(0.5);\n    if (shadowUV1.x >= 0.0 && shadowUV1.x <= 1.0 && shadowUV1.y >= 0.0 && shadowUV1.y <= 1.0) {\n      float currentDepth1 = clamp(v_depth[1], 0.0, 1.0);\n      #if CC_SHADOW_1_TYPE == 3\n        shadow_1 = shadowPCF3X3(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w, cc_shadow_info[1].z);\n      #elif CC_SHADOW_1_TYPE == 4\n        shadow_1 = shadowPCF5X5(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w, cc_shadow_info[1].z);\n      #else\n        shadow_1 = shadowSimple(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w);\n      #endif\n      shadow_1 = computeFallOff(shadow_1, projCoords1, 0.0);\n    }\n    result1.diffuse *= shadow_1;\n    result1.specular *= shadow_1;\n  #endif\n      result.diffuse += result1.diffuse;\n      result.specular += result1.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 2\n    #if CC_LIGHT_2_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[2]);\n    #else\n      LightInfo info2;\n      #if CC_LIGHT_2_TYPE == 0\n        info2 = computeDirectionalLighting(cc_lightDirection[2], cc_lightColor[2]);\n      #elif CC_LIGHT_2_TYPE == 1\n        info2 = computePointLighting(s.position, cc_lightPositionAndRange[2], cc_lightColor[2]);\n      #elif CC_LIGHT_2_TYPE == 2\n        info2 = computeSpotLighting(s.position, cc_lightPositionAndRange[2], cc_lightDirection[2], cc_lightColor[2]);\n      #endif\n      Lighting result2 = brdf(s, info2);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 2\n    float shadow_2 = 1.0;\n    vec2 projCoords2 = v_posLightSpace[2].xy / v_posLightSpace[2].w;\n    vec2 shadowUV2 = projCoords2 * 0.5 + vec2(0.5);\n    if (shadowUV2.x >= 0.0 && shadowUV2.x <= 1.0 && shadowUV2.y >= 0.0 && shadowUV2.y <= 1.0) {\n      float currentDepth2 = clamp(v_depth[2], 0.0, 1.0);\n      #if CC_SHADOW_2_TYPE == 3\n        shadow_2 = shadowPCF3X3(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w, cc_shadow_info[2].z);\n      #elif CC_SHADOW_2_TYPE == 4\n        shadow_2 = shadowPCF5X5(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w, cc_shadow_info[2].z);\n      #else\n        shadow_2 = shadowSimple(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w);\n      #endif\n      shadow_2 = computeFallOff(shadow_2, projCoords2, 0.0);\n    }\n    result2.diffuse *= shadow_2;\n    result2.specular *= shadow_2;\n  #endif\n      result.diffuse += result2.diffuse;\n      result.specular += result2.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 3\n    #if CC_LIGHT_3_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[3]);\n    #else\n      LightInfo info3;\n      #if CC_LIGHT_3_TYPE == 0\n        info3 = computeDirectionalLighting(cc_lightDirection[3], cc_lightColor[3]);\n      #elif CC_LIGHT_3_TYPE == 1\n        info3 = computePointLighting(s.position, cc_lightPositionAndRange[3], cc_lightColor[3]);\n      #elif CC_LIGHT_3_TYPE == 2\n        info3 = computeSpotLighting(s.position, cc_lightPositionAndRange[3], cc_lightDirection[3], cc_lightColor[3]);\n      #endif\n      Lighting result3 = brdf(s, info3);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 3\n    float shadow_3 = 1.0;\n    vec2 projCoords3 = v_posLightSpace[3].xy / v_posLightSpace[3].w;\n    vec2 shadowUV3 = projCoords3 * 0.5 + vec2(0.5);\n    if (shadowUV3.x >= 0.0 && shadowUV3.x <= 1.0 && shadowUV3.y >= 0.0 && shadowUV3.y <= 1.0) {\n      float currentDepth3 = clamp(v_depth[3], 0.0, 1.0);\n      #if CC_SHADOW_3_TYPE == 3\n        shadow_3 = shadowPCF3X3(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w, cc_shadow_info[3].z);\n      #elif CC_SHADOW_3_TYPE == 4\n        shadow_3 = shadowPCF5X5(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w, cc_shadow_info[3].z);\n      #else\n        shadow_3 = shadowSimple(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w);\n      #endif\n      shadow_3 = computeFallOff(shadow_3, projCoords3, 0.0);\n    }\n    result3.diffuse *= shadow_3;\n    result3.specular *= shadow_3;\n  #endif\n      result.diffuse += result3.diffuse;\n      result.specular += result3.specular;\n    #endif\n  #endif\n  return composePhongShading(result, s);\n}\nvoid surf (out PhongSurface s) {\n  vec4 diffuse = vec4(1, 1, 1, 1);\n  #if CC_USE_ATTRIBUTE_COLOR\n    diffuse *= v_color;\n  #endif\n  diffuse *= diffuseColor;\n  #if USE_DIFFUSE_TEXTURE\n  vec4 diffuseTexture_tmp = texture2D(diffuseTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_diffuseTexture\n      diffuseTexture_tmp.a *= texture2D(diffuseTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    diffuse.rgb *= (diffuseTexture_tmp.rgb * diffuseTexture_tmp.rgb);\n    diffuse.a *= diffuseTexture_tmp.a;\n  #else\n    diffuse *= diffuseTexture_tmp;\n  #endif\n  #endif\n  ALPHA_TEST(diffuse);\n  s.diffuse = diffuse.rgb;\n  s.opacity = diffuse.a;\n  #if USE_EMISSIVE\n    s.emissive = emissiveColor.rgb;\n    #if USE_EMISSIVE_TEXTURE\n  vec4 emissiveTexture_tmp = texture2D(emissiveTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_emissiveTexture\n      emissiveTexture_tmp.a *= texture2D(emissiveTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    s.emissive.rgb *= (emissiveTexture_tmp.rgb * emissiveTexture_tmp.rgb);\n  #else\n    s.emissive.rgb *= emissiveTexture_tmp.rgb;\n  #endif\n    #endif\n  #endif\n  #if USE_SPECULAR\n    s.specular = specularColor.rgb;\n    #if USE_SPECULAR_TEXTURE\n  vec4 specularTexture_tmp = texture2D(specularTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_specularTexture\n      specularTexture_tmp.a *= texture2D(specularTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    s.specular.rgb *= (specularTexture_tmp.rgb * specularTexture_tmp.rgb);\n  #else\n    s.specular.rgb *= specularTexture_tmp.rgb;\n  #endif\n    #endif\n  #endif\n  s.normal = v_worldNormal;\n  #if USE_NORMAL_TEXTURE\n    vec3 nmmp = texture2D(normalTexture, v_uv0).xyz - vec3(0.5);\n    s.normal =\n      nmmp.x * normalize(v_tangent) +\n      nmmp.y * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n    s.normal = normalize(s.normal);\n  #endif\n  s.position = v_worldPos;\n  s.viewDirection = v_viewDirection;\n  s.glossiness = glossiness;\n}\nvoid main () {\n  PhongSurface s;\n  surf(s);\n  vec4 color = CCPhongShading(s);\n  gl_FragColor = CCFragOutput(color);\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CC_SHADOW","defines":["CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"]},{"name":"CCLIGHTS","defines":["CC_NUM_LIGHTS"]}],"samplers":[{"name":"cc_shadow_map_0","defines":["CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"]},{"name":"cc_shadow_map_1","defines":["CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"]}]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_JOINTS_TEXTRUE","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"CC_JOINTS_TEXTURE_FLOAT32","type":"boolean","defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"CC_USE_ATTRIBUTE_UV0","type":"boolean","defines":[]},{"name":"CC_USE_ATTRIBUTE_COLOR","type":"boolean","defines":[]},{"name":"CC_USE_ATTRIBUTE_NORMAL","type":"boolean","defines":[]},{"name":"CC_USE_ATTRIBUTE_TANGENT","type":"boolean","defines":[]},{"name":"CC_USE_SHADOW_MAP","type":"boolean","defines":[]},{"name":"CC_NUM_SHADOW_LIGHTS","type":"number","defines":["CC_USE_SHADOW_MAP"],"range":[0,3]},{"name":"USE_DIFFUSE_TEXTURE","type":"boolean","defines":[]},{"name":"USE_NORMAL_TEXTURE","type":"boolean","defines":[]},{"name":"OUTPUT_TO_GAMMA","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_SPECULAR","type":"boolean","defines":[]},{"name":"USE_SPECULAR_TEXTURE","type":"boolean","defines":["USE_SPECULAR"]},{"name":"USE_EMISSIVE","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_TEXTURE","type":"boolean","defines":["USE_EMISSIVE"]},{"name":"CC_NUM_LIGHTS","type":"number","defines":[],"range":[0,3]},{"name":"CC_LIGHT_0_TYPE","type":"number","defines":["CC_NUM_LIGHTS"],"range":[0,3]},{"name":"CC_SHADOW_0_TYPE","type":"number","defines":["CC_NUM_LIGHTS","CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"],"range":[0,3]},{"name":"CC_LIGHT_1_TYPE","type":"number","defines":["CC_NUM_LIGHTS"],"range":[0,3]},{"name":"CC_SHADOW_1_TYPE","type":"number","defines":["CC_NUM_LIGHTS","CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"],"range":[0,3]},{"name":"CC_LIGHT_2_TYPE","type":"number","defines":["CC_NUM_LIGHTS"],"range":[0,3]},{"name":"CC_SHADOW_2_TYPE","type":"number","defines":["CC_NUM_LIGHTS","CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"],"range":[0,3]},{"name":"CC_LIGHT_3_TYPE","type":"number","defines":["CC_NUM_LIGHTS"],"range":[0,3]},{"name":"CC_SHADOW_3_TYPE","type":"number","defines":["CC_NUM_LIGHTS","CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"],"range":[0,3]},{"name":"CC_USE_ALPHA_ATLAS_diffuseTexture","type":"boolean","defines":["USE_DIFFUSE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_DIFFUSE_TEXTURE"]},{"name":"CC_USE_ALPHA_ATLAS_emissiveTexture","type":"boolean","defines":["USE_EMISSIVE","USE_EMISSIVE_TEXTURE"]},{"name":"CC_USE_ALPHA_ATLAS_specularTexture","type":"boolean","defines":["USE_SPECULAR","USE_SPECULAR_TEXTURE"]}],"blocks":[{"name":"SKINNING","binding":0,"members":[{"name":"jointsTextureSize","type":14,"count":1}],"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"JOINT_MATRIX","binding":1,"members":[{"name":"jointMatrices","type":26,"count":50}],"defines":["CC_USE_SKINNING"]},{"name":"MAIN_TILING","binding":2,"members":[{"name":"mainTiling","type":14,"count":1},{"name":"mainOffset","type":14,"count":1}],"defines":[]},{"name":"ALPHA_TEST","binding":3,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"PhongFrag","binding":4,"members":[{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissiveColor","type":16,"count":1},{"name":"glossiness","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"jointsTexture","type":29,"count":1,"binding":30,"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"diffuseTexture","type":29,"count":1,"binding":31,"defines":["USE_DIFFUSE_TEXTURE"]},{"name":"specularTexture","type":29,"count":1,"binding":32,"defines":["USE_SPECULAR","USE_SPECULAR_TEXTURE"]},{"name":"emissiveTexture","type":29,"count":1,"binding":33,"defines":["USE_EMISSIVE","USE_EMISSIVE_TEXTURE"]},{"name":"normalTexture","type":29,"count":1,"binding":34,"defines":["USE_NORMAL_TEXTURE"]}]},{"hash":1165371292,"record":null,"name":"builtin-phong|shadow-map-vs|shadow-map-fs","glsl3":{"vert":"\nprecision highp float;\nin vec3 a_position;\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform CC_SHADOW_MAP {\n  mat4  cc_shadow_map_lightViewProjMatrix;\n  vec4  cc_shadow_map_info;\n  float cc_shadow_map_bias;\n};\nout float v_depth;\n#if CC_USE_SKINNING\n  in vec4 a_weights;\n  in vec4 a_joints;\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform SKINNING {\n      vec2 jointsTextureSize;\n    };\n    uniform sampler2D jointsTexture;\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = texture(jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture(jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture(jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture(jointsTexture, vec2(dx * (x + 3.5), y));\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture(jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform JOINT_MATRIX {\n      mat4 jointMatrices[50];\n    };\n    mat4 getBoneMatrix(const in float i) {\n      return jointMatrices[int(i)];\n    }\n  #endif\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\nvoid SKIN_VERTEX(inout vec4 a1) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n  #endif\n}\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n  #endif\n}\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n    a3 = m * a3;\n  #endif\n}\nvoid main () {\n  vec4 position = vec4(a_position, 1);\n  SKIN_VERTEX(position);\n  gl_Position = cc_shadow_map_lightViewProjMatrix * cc_matWorld * position;\n  v_depth = ((gl_Position.z + cc_shadow_map_info.x) / (cc_shadow_map_info.x + cc_shadow_map_info.y)) + cc_shadow_map_bias;\n}","frag":"\nprecision highp float;\nin float v_depth;\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nvoid main () {\n    gl_FragColor = packDepthToRGBA(v_depth);\n}"},"glsl1":{"vert":"\nprecision highp float;\nattribute vec3 a_position;\nuniform mat4 cc_matWorld;\nuniform mat4 cc_shadow_map_lightViewProjMatrix;\nuniform vec4 cc_shadow_map_info;\nuniform float cc_shadow_map_bias;\nvarying float v_depth;\n#if CC_USE_SKINNING\n  attribute vec4 a_weights;\n  attribute vec4 a_joints;\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform vec2 jointsTextureSize;\n    uniform sampler2D jointsTexture;\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = texture2D(jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture2D(jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture2D(jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture2D(jointsTexture, vec2(dx * (x + 3.5), y));\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture2D(jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform mat4 jointMatrices[50];\n    mat4 getBoneMatrix(const in float i) {\n      return jointMatrices[int(i)];\n    }\n  #endif\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\nvoid SKIN_VERTEX(inout vec4 a1) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n  #endif\n}\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n  #endif\n}\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n    a3 = m * a3;\n  #endif\n}\nvoid main () {\n  vec4 position = vec4(a_position, 1);\n  SKIN_VERTEX(position);\n  gl_Position = cc_shadow_map_lightViewProjMatrix * cc_matWorld * position;\n  v_depth = ((gl_Position.z + cc_shadow_map_info.x) / (cc_shadow_map_info.x + cc_shadow_map_info.y)) + cc_shadow_map_bias;\n}","frag":"\nprecision highp float;\nvarying float v_depth;\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nvoid main () {\n    gl_FragColor = packDepthToRGBA(v_depth);\n}"},"builtins":{"globals":{"blocks":[{"name":"CC_SHADOW_MAP","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_JOINTS_TEXTRUE","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"CC_JOINTS_TEXTURE_FLOAT32","type":"boolean","defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]}],"blocks":[{"name":"SKINNING","binding":0,"members":[{"name":"jointsTextureSize","type":14,"count":1}],"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"JOINT_MATRIX","binding":1,"members":[{"name":"jointMatrices","type":26,"count":50}],"defines":["CC_USE_SKINNING"]}],"samplers":[{"name":"jointsTexture","type":29,"count":1,"binding":30,"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]}]}],[{"passes":[{"name":"phong","program":"builtin-phong|phong-vs|phong-fs","rasterizerState":{"cullMode":1029},"depthStencilState":{"depthTest":true,"depthWrite":true},"properties":{"alphaThreshold":{"type":13,"value":[0.5]},"mainTiling":{"type":14,"value":[1,1]},"mainOffset":{"type":14,"value":[0,0]},"diffuseColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"diffuseTexture":{"value":"white","type":29},"specularColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"specularTexture":{"value":"white","type":29},"emissiveColor":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveTexture":{"value":"white","type":29},"glossiness":{"type":13,"value":[10]},"normalTexture":{"value":"white","type":29}}},{"name":"shadowcast","stage":"shadowcast","program":"builtin-phong|shadow-map-vs|shadow-map-fs","rasterizerState":{"cullMode":1029},"depthStencilState":{"depthTest":true,"depthWrite":true}}]}]]],0,0,[],[],[]],[[[36,"bgAudio",".mp3",253.272],-1],0,0,[],[],[]],[[{"name":"leaderboardButtonHover","rect":[4,4,504,508],"offset":[0,-2],"originalSize":[512,512],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[109]],[[{"name":"Continue","rect":[0,90,1024,331],"offset":[0,0.5],"originalSize":[1024,512],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[110]],[[{"name":"CaptureasdBlurry","rect":[0,0,1024,766],"offset":[0,0],"originalSize":[1024,766],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[111]],[[{"name":"leaderboardButtonPressed","rect":[4,4,504,508],"offset":[0,-2],"originalSize":[512,512],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[112]],[[[22,"obstaclePrimaryMat",[{},"0",11,[{"defines":{"USE_DIFFUSE_TEXTURE":true}},"props",11,[{"fog_distance":200,"glossiness":10},"fog_color",8,[4,4294967295],"diffuseTexture",6,0]]]]],0,0,[0,0],[11,6],[36,15]],[[{"name":"blue-play-button-pressed-down","rect":[0,0,512,512],"offset":[0,0],"originalSize":[512,512],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[113]],[[[87,"fog",[{"hash":2827785656,"record":null,"name":"fog|vs|fs","glsl3":{"vert":"\nprecision highp float;\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n#if CC_USE_SKINNING\n  in vec4 a_weights;\n  in vec4 a_joints;\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform SKINNING {\n      vec2 jointsTextureSize;\n    };\n    uniform sampler2D jointsTexture;\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = texture(jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture(jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture(jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture(jointsTexture, vec2(dx * (x + 3.5), y));\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture(jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform JOINT_MATRIX {\n      mat4 jointMatrices[50];\n    };\n    mat4 getBoneMatrix(const in float i) {\n      return jointMatrices[int(i)];\n    }\n  #endif\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\nstruct StandardVertInput {\n  vec2 uv;\n  vec4 position;\n  vec3 normal;\n  vec4 tangent;\n  vec4 color;\n};\nin vec3 a_position;\n#if CC_USE_ATTRIBUTE_UV0\nin vec2 a_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\nin vec4 a_color;\n#endif\n#if CC_USE_ATTRIBUTE_NORMAL\nin vec3 a_normal;\n#endif\n#if CC_USE_ATTRIBUTE_TANGENT\nin vec4 a_tangent;\n#endif\nvoid CCAttribute (out StandardVertInput In) {\n  In.position = vec4(a_position, 1.0);\n  #if CC_USE_ATTRIBUTE_UV0\n    In.uv = a_uv0;\n  #else\n    In.uv = vec2(0.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_COLOR\n    In.color = a_color;\n  #else\n    In.color = vec4(1.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_NORMAL\n    In.normal = a_normal;\n  #else\n    In.normal = vec3(0.0, 1.0, 0.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_TANGENT\n    In.tangent = a_tangent;\n  #else\n    In.tangent = vec4(1.0, 0.0, 0.0, 0.0);\n  #endif\n}\nvoid CCVertInput(out StandardVertInput In) {\n  CCAttribute(In);\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    In.position = m * In.position;\n    #if CC_USE_ATTRIBUTE_NORMAL\n      In.normal = (m * vec4(In.normal, 0)).xyz;\n    #endif\n    #if CC_USE_ATTRIBUTE_TANGENT\n      In.tangent = m * In.tangent;\n    #endif\n  #endif\n}\n#if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  uniform CC_SHADOW {\n    mat4 cc_shadow_lightViewProjMatrix[2];\n    vec4 cc_shadow_info[2];\n  };\n  #if CC_NUM_SHADOW_LIGHTS > 0\n    uniform sampler2D cc_shadow_map_0;\n  #endif\n  #if CC_NUM_SHADOW_LIGHTS > 1\n    uniform sampler2D cc_shadow_map_1;\n  #endif\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\nvoid CCShadowInput (vec3 worldPos) {\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  for (int i = 0; i < CC_NUM_SHADOW_LIGHTS; i++) {\n    v_posLightSpace[i] = cc_shadow_lightViewProjMatrix[i] * vec4(worldPos, 1.0);\n    v_depth[i] = (v_posLightSpace[i].z + cc_shadow_info[i].x) / (cc_shadow_info[i].x + cc_shadow_info[i].y);\n  }\n  #endif\n}\nuniform MAIN_TILING {\n  vec2 mainTiling;\n  vec2 mainOffset;\n};\n#if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE || USE_SPECULAR_TEXTURE || USE_NORMAL_TEXTURE)\n  out mediump vec2 v_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\n  out lowp vec4 v_color;\n#endif\n#if USE_NORMAL_TEXTURE\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\nout vec3 v_worldNormal;\nout vec3 v_worldPos;\nout vec3 v_viewDirection;\nout vec4 v_position;\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  vec4 position = In.position;\n  v_worldNormal = normalize((cc_matWorldIT * vec4(In.normal, 0)).xyz);\n  v_worldPos = (cc_matWorld * position).xyz;\n  v_viewDirection = normalize(cc_cameraPos.xyz - v_worldPos);\n  #if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE || USE_SPECULAR_TEXTURE || USE_NORMAL_TEXTURE)\n    v_uv0 = In.uv * mainTiling + mainOffset;\n  #endif\n  #if CC_USE_ATTRIBUTE_COLOR\n    v_color = In.color;\n  #endif\n  #if USE_NORMAL_TEXTURE\n    v_tangent = normalize((cc_matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_worldNormal, v_tangent) * In.tangent.w;\n  #endif\n  CCShadowInput(v_worldPos);\n  v_position = In.position;\n  gl_Position = cc_matViewProj * cc_matWorld * position;\n}","frag":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nvec4 CCFragOutput (vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    color.rgb = sqrt(color.rgb);\n  #endif\n\treturn color;\n}\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform PhongFrag {\n  lowp vec4 diffuseColor;\n  lowp vec4 specularColor;\n  lowp vec4 emissiveColor;\n  float glossiness;\n};\nuniform Fog{\n  vec4 fog_color;\n  float fog_distance;\n};\n#if USE_DIFFUSE_TEXTURE\n  uniform sampler2D diffuseTexture;\n#endif\n#if USE_SPECULAR && USE_SPECULAR_TEXTURE\n  uniform sampler2D specularTexture;\n#endif\n#if USE_EMISSIVE && USE_EMISSIVE_TEXTURE\n  uniform sampler2D emissiveTexture;\n#endif\n#if USE_NORMAL_TEXTURE\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalTexture;\n#endif\nin vec3 v_worldNormal;\nin vec3 v_worldPos;\nin vec3 v_viewDirection;\n#if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || (USE_EMISSIVE && USE_EMISSIVE_TEXTURE) || (USE_SPECULAR && USE_SPECULAR_TEXTURE) || USE_NORMAL_TEXTURE)\n  in mediump vec2 v_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\n  in lowp vec4 v_color;\n#endif\nin vec4 v_position;\n#if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  uniform CC_SHADOW {\n    mat4 cc_shadow_lightViewProjMatrix[2];\n    vec4 cc_shadow_info[2];\n  };\n  #if CC_NUM_SHADOW_LIGHTS > 0\n    uniform sampler2D cc_shadow_map_0;\n  #endif\n  #if CC_NUM_SHADOW_LIGHTS > 1\n    uniform sampler2D cc_shadow_map_1;\n  #endif\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\nfloat getDepth(sampler2D shadowMap, vec2 shadowUV) {\n    return unpackRGBAToDepth(texture(shadowMap, shadowUV));\n}\nfloat computeFallOff(float shadow, vec2 coords, float frustumEdgeFalloff) {\n  return shadow;\n}\nfloat shadowSimple(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness) {\n  float closestDepth = getDepth(shadowMap, shadowUV);\n  return currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n}\nfloat shadowPCF3X3(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness, float shadowSize) {\n  float shadow = 0.0;\n  for (int x = -1; x <= 1; ++x) {\n    for (int y = -1; y <= 1; ++y) {\n      float closestDepth = getDepth(shadowMap, shadowUV + vec2(x, y) * 1.0/shadowSize);\n      shadow += currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n    }\n  }\n  shadow /= 9.0;\n  return shadow;\n}\nfloat shadowPCF5X5(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness, float shadowSize) {\n  float shadow = 0.0;\n  for (int x = -2; x <= 2; ++x) {\n    for (int y = -2; y <= 2; ++y) {\n      float closestDepth = getDepth(shadowMap, shadowUV + vec2(x, y) * 1.0/shadowSize);\n      shadow += currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n    }\n  }\n  shadow /= 25.0;\n  return shadow;\n}\n#if CC_NUM_LIGHTS > 0\nuniform CCLIGHTS {\n  vec4 cc_lightPositionAndRange[4];\n  vec4 cc_lightDirection[4];\n  vec4 cc_lightColor[4];\n};\n#endif\nstruct LightInfo {\n  vec3 lightDir;\n  vec3 radiance;\n  vec4 lightColor;\n};\nLightInfo computeDirectionalLighting(\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  ret.lightDir = -normalize(lightDirection.xyz);\n  ret.radiance = lightColor.rgb;\n  ret.lightColor = lightColor;\n  return ret;\n}\nLightInfo computePointLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  ret.lightDir = normalize(lightDir);\n  ret.radiance = lightColor.rgb * attenuation;\n  ret.lightColor = lightColor;\n  return ret;\n}\nLightInfo computeSpotLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  lightDir = normalize(lightDir);\n  float cosConeAngle = max(0., dot(lightDirection.xyz, -lightDir));\n  cosConeAngle = cosConeAngle < lightDirection.w ? 0. : cosConeAngle;\n  cosConeAngle = pow(cosConeAngle, lightColor.w);\n  ret.lightDir = lightDir;\n  ret.radiance = lightColor.rgb * attenuation * cosConeAngle;\n  ret.lightColor = lightColor;\n  return ret;\n}\nstruct Lighting {\n  vec3 diffuse;\n  vec3 specular;\n};\nstruct PhongSurface {\n  vec3 diffuse;\n  vec3 emissive;\n  vec3 specular;\n  float opacity;\n  float glossiness;\n  vec3 position;\n  vec3 normal;\n  vec3 viewDirection;\n};\nLighting brdf (PhongSurface s, LightInfo info) {\n  Lighting result;\n  float ndh = 0.0;\n  vec3 halfDir = normalize(s.viewDirection + info.lightDir);\n  float NdotH = max(0.0, dot(s.normal, halfDir));\n  NdotH = pow(NdotH, max(1.0, s.glossiness * 128.0));\n  result.diffuse = info.radiance * max(0.0, dot(s.normal, info.lightDir));\n  result.specular = info.radiance * NdotH;\n  return result;\n}\nvec4 composePhongShading (Lighting lighting, PhongSurface s) {\n  vec4 o = vec4(0.0, 0.0, 0.0, 1.0);\n  o.rgb = lighting.diffuse * s.diffuse;\n  #if USE_EMISSIVE\n    o.rgb += s.emissive;\n  #endif\n  #if USE_SPECULAR\n    o.rgb += lighting.specular * s.specular;\n  #endif\n  o.a = s.opacity;\n  return o;\n}\nvec3 ambient(PhongSurface s, vec4 ambientColor) {\n  return s.diffuse * ambientColor.rgb;\n}\nvec4 CCPhongShading (in PhongSurface s) {\n  Lighting result;\n  result.diffuse = vec3(0, 0, 0);\n  result.specular = vec3(0, 0, 0);\n  #if CC_NUM_LIGHTS > 0\n    #if CC_LIGHT_0_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[0]);\n    #else\n      LightInfo info0;\n      #if CC_LIGHT_0_TYPE == 0\n        info0 = computeDirectionalLighting(cc_lightDirection[0], cc_lightColor[0]);\n      #elif CC_LIGHT_0_TYPE == 1\n        info0 = computePointLighting(s.position, cc_lightPositionAndRange[0], cc_lightColor[0]);\n      #elif CC_LIGHT_0_TYPE == 2\n        info0 = computeSpotLighting(s.position, cc_lightPositionAndRange[0], cc_lightDirection[0], cc_lightColor[0]);\n      #endif\n      Lighting result0 = brdf(s, info0);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n    float shadow_0 = 1.0;\n    vec2 projCoords0 = v_posLightSpace[0].xy / v_posLightSpace[0].w;\n    vec2 shadowUV0 = projCoords0 * 0.5 + vec2(0.5);\n    if (shadowUV0.x >= 0.0 && shadowUV0.x <= 1.0 && shadowUV0.y >= 0.0 && shadowUV0.y <= 1.0) {\n      float currentDepth0 = clamp(v_depth[0], 0.0, 1.0);\n      #if CC_SHADOW_0_TYPE == 3\n        shadow_0 = shadowPCF3X3(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w, cc_shadow_info[0].z);\n      #elif CC_SHADOW_0_TYPE == 4\n        shadow_0 = shadowPCF5X5(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w, cc_shadow_info[0].z);\n      #else\n        shadow_0 = shadowSimple(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w);\n      #endif\n      shadow_0 = computeFallOff(shadow_0, projCoords0, 0.0);\n    }\n    result0.diffuse *= shadow_0;\n    result0.specular *= shadow_0;\n  #endif\n      result.diffuse += result0.diffuse;\n      result.specular += result0.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 1\n    #if CC_LIGHT_1_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[1]);\n    #else\n      LightInfo info1;\n      #if CC_LIGHT_1_TYPE == 0\n        info1 = computeDirectionalLighting(cc_lightDirection[1], cc_lightColor[1]);\n      #elif CC_LIGHT_1_TYPE == 1\n        info1 = computePointLighting(s.position, cc_lightPositionAndRange[1], cc_lightColor[1]);\n      #elif CC_LIGHT_1_TYPE == 2\n        info1 = computeSpotLighting(s.position, cc_lightPositionAndRange[1], cc_lightDirection[1], cc_lightColor[1]);\n      #endif\n      Lighting result1 = brdf(s, info1);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 1\n    float shadow_1 = 1.0;\n    vec2 projCoords1 = v_posLightSpace[1].xy / v_posLightSpace[1].w;\n    vec2 shadowUV1 = projCoords1 * 0.5 + vec2(0.5);\n    if (shadowUV1.x >= 0.0 && shadowUV1.x <= 1.0 && shadowUV1.y >= 0.0 && shadowUV1.y <= 1.0) {\n      float currentDepth1 = clamp(v_depth[1], 0.0, 1.0);\n      #if CC_SHADOW_1_TYPE == 3\n        shadow_1 = shadowPCF3X3(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w, cc_shadow_info[1].z);\n      #elif CC_SHADOW_1_TYPE == 4\n        shadow_1 = shadowPCF5X5(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w, cc_shadow_info[1].z);\n      #else\n        shadow_1 = shadowSimple(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w);\n      #endif\n      shadow_1 = computeFallOff(shadow_1, projCoords1, 0.0);\n    }\n    result1.diffuse *= shadow_1;\n    result1.specular *= shadow_1;\n  #endif\n      result.diffuse += result1.diffuse;\n      result.specular += result1.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 2\n    #if CC_LIGHT_2_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[2]);\n    #else\n      LightInfo info2;\n      #if CC_LIGHT_2_TYPE == 0\n        info2 = computeDirectionalLighting(cc_lightDirection[2], cc_lightColor[2]);\n      #elif CC_LIGHT_2_TYPE == 1\n        info2 = computePointLighting(s.position, cc_lightPositionAndRange[2], cc_lightColor[2]);\n      #elif CC_LIGHT_2_TYPE == 2\n        info2 = computeSpotLighting(s.position, cc_lightPositionAndRange[2], cc_lightDirection[2], cc_lightColor[2]);\n      #endif\n      Lighting result2 = brdf(s, info2);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 2\n    float shadow_2 = 1.0;\n    vec2 projCoords2 = v_posLightSpace[2].xy / v_posLightSpace[2].w;\n    vec2 shadowUV2 = projCoords2 * 0.5 + vec2(0.5);\n    if (shadowUV2.x >= 0.0 && shadowUV2.x <= 1.0 && shadowUV2.y >= 0.0 && shadowUV2.y <= 1.0) {\n      float currentDepth2 = clamp(v_depth[2], 0.0, 1.0);\n      #if CC_SHADOW_2_TYPE == 3\n        shadow_2 = shadowPCF3X3(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w, cc_shadow_info[2].z);\n      #elif CC_SHADOW_2_TYPE == 4\n        shadow_2 = shadowPCF5X5(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w, cc_shadow_info[2].z);\n      #else\n        shadow_2 = shadowSimple(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w);\n      #endif\n      shadow_2 = computeFallOff(shadow_2, projCoords2, 0.0);\n    }\n    result2.diffuse *= shadow_2;\n    result2.specular *= shadow_2;\n  #endif\n      result.diffuse += result2.diffuse;\n      result.specular += result2.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 3\n    #if CC_LIGHT_3_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[3]);\n    #else\n      LightInfo info3;\n      #if CC_LIGHT_3_TYPE == 0\n        info3 = computeDirectionalLighting(cc_lightDirection[3], cc_lightColor[3]);\n      #elif CC_LIGHT_3_TYPE == 1\n        info3 = computePointLighting(s.position, cc_lightPositionAndRange[3], cc_lightColor[3]);\n      #elif CC_LIGHT_3_TYPE == 2\n        info3 = computeSpotLighting(s.position, cc_lightPositionAndRange[3], cc_lightDirection[3], cc_lightColor[3]);\n      #endif\n      Lighting result3 = brdf(s, info3);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 3\n    float shadow_3 = 1.0;\n    vec2 projCoords3 = v_posLightSpace[3].xy / v_posLightSpace[3].w;\n    vec2 shadowUV3 = projCoords3 * 0.5 + vec2(0.5);\n    if (shadowUV3.x >= 0.0 && shadowUV3.x <= 1.0 && shadowUV3.y >= 0.0 && shadowUV3.y <= 1.0) {\n      float currentDepth3 = clamp(v_depth[3], 0.0, 1.0);\n      #if CC_SHADOW_3_TYPE == 3\n        shadow_3 = shadowPCF3X3(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w, cc_shadow_info[3].z);\n      #elif CC_SHADOW_3_TYPE == 4\n        shadow_3 = shadowPCF5X5(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w, cc_shadow_info[3].z);\n      #else\n        shadow_3 = shadowSimple(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w);\n      #endif\n      shadow_3 = computeFallOff(shadow_3, projCoords3, 0.0);\n    }\n    result3.diffuse *= shadow_3;\n    result3.specular *= shadow_3;\n  #endif\n      result.diffuse += result3.diffuse;\n      result.specular += result3.specular;\n    #endif\n  #endif\n  return composePhongShading(result, s);\n}\nvoid surf (out PhongSurface s) {\n  vec4 diffuse = vec4(1, 1, 1, 1);\n  #if CC_USE_ATTRIBUTE_COLOR\n    diffuse *= v_color;\n  #endif\n  diffuse *= diffuseColor;\n  #if USE_DIFFUSE_TEXTURE\n  vec4 diffuseTexture_tmp = texture(diffuseTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_diffuseTexture\n      diffuseTexture_tmp.a *= texture(diffuseTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    diffuse.rgb *= (diffuseTexture_tmp.rgb * diffuseTexture_tmp.rgb);\n    diffuse.a *= diffuseTexture_tmp.a;\n  #else\n    diffuse *= diffuseTexture_tmp;\n  #endif\n  #endif\n  ALPHA_TEST(diffuse);\n  s.diffuse = diffuse.rgb;\n  s.opacity = diffuse.a;\n  #if USE_EMISSIVE\n    s.emissive = emissiveColor.rgb;\n    #if USE_EMISSIVE_TEXTURE\n  vec4 emissiveTexture_tmp = texture(emissiveTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_emissiveTexture\n      emissiveTexture_tmp.a *= texture(emissiveTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    s.emissive.rgb *= (emissiveTexture_tmp.rgb * emissiveTexture_tmp.rgb);\n  #else\n    s.emissive.rgb *= emissiveTexture_tmp.rgb;\n  #endif\n    #endif\n  #endif\n  #if USE_SPECULAR\n    s.specular = specularColor.rgb;\n    #if USE_SPECULAR_TEXTURE\n  vec4 specularTexture_tmp = texture(specularTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_specularTexture\n      specularTexture_tmp.a *= texture(specularTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    s.specular.rgb *= (specularTexture_tmp.rgb * specularTexture_tmp.rgb);\n  #else\n    s.specular.rgb *= specularTexture_tmp.rgb;\n  #endif\n    #endif\n  #endif\n  s.normal = v_worldNormal;\n  #if USE_NORMAL_TEXTURE\n    vec3 nmmp = texture(normalTexture, v_uv0).xyz - vec3(0.5);\n    s.normal =\n      nmmp.x * normalize(v_tangent) +\n      nmmp.y * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n    s.normal = normalize(s.normal);\n  #endif\n  s.position = v_worldPos;\n  s.viewDirection = v_viewDirection;\n  s.glossiness = glossiness;\n}\nvoid main () {\n  PhongSurface s;\n  surf(s);\n  vec4 color = CCPhongShading(s);\n  float fog_ratio =  1.0-exp(-gl_FragCoord.w*fog_distance);\n  gl_FragColor = CCFragOutput(color) * fog_ratio + (1.0-fog_ratio) * fog_color;\n}"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matWorld;\nuniform mat4 cc_matWorldIT;\nuniform mat4 cc_matViewProj;\nuniform vec4 cc_cameraPos;\n#if CC_USE_SKINNING\n  attribute vec4 a_weights;\n  attribute vec4 a_joints;\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform vec2 jointsTextureSize;\n    uniform sampler2D jointsTexture;\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = texture2D(jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture2D(jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture2D(jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture2D(jointsTexture, vec2(dx * (x + 3.5), y));\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture2D(jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform mat4 jointMatrices[50];\n    mat4 getBoneMatrix(const in float i) {\n      return jointMatrices[int(i)];\n    }\n  #endif\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\nstruct StandardVertInput {\n  vec2 uv;\n  vec4 position;\n  vec3 normal;\n  vec4 tangent;\n  vec4 color;\n};\nattribute vec3 a_position;\n#if CC_USE_ATTRIBUTE_UV0\nattribute vec2 a_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\nattribute vec4 a_color;\n#endif\n#if CC_USE_ATTRIBUTE_NORMAL\nattribute vec3 a_normal;\n#endif\n#if CC_USE_ATTRIBUTE_TANGENT\nattribute vec4 a_tangent;\n#endif\nvoid CCAttribute (out StandardVertInput In) {\n  In.position = vec4(a_position, 1.0);\n  #if CC_USE_ATTRIBUTE_UV0\n    In.uv = a_uv0;\n  #else\n    In.uv = vec2(0.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_COLOR\n    In.color = a_color;\n  #else\n    In.color = vec4(1.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_NORMAL\n    In.normal = a_normal;\n  #else\n    In.normal = vec3(0.0, 1.0, 0.0);\n  #endif\n  #if CC_USE_ATTRIBUTE_TANGENT\n    In.tangent = a_tangent;\n  #else\n    In.tangent = vec4(1.0, 0.0, 0.0, 0.0);\n  #endif\n}\nvoid CCVertInput(out StandardVertInput In) {\n  CCAttribute(In);\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    In.position = m * In.position;\n    #if CC_USE_ATTRIBUTE_NORMAL\n      In.normal = (m * vec4(In.normal, 0)).xyz;\n    #endif\n    #if CC_USE_ATTRIBUTE_TANGENT\n      In.tangent = m * In.tangent;\n    #endif\n  #endif\n}\n#if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  uniform mat4 cc_shadow_lightViewProjMatrix[2];\nuniform vec4 cc_shadow_info[2];\n  #if CC_NUM_SHADOW_LIGHTS > 0\n    uniform sampler2D cc_shadow_map_0;\n  #endif\n  #if CC_NUM_SHADOW_LIGHTS > 1\n    uniform sampler2D cc_shadow_map_1;\n  #endif\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\nvoid CCShadowInput (vec3 worldPos) {\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  for (int i = 0; i < CC_NUM_SHADOW_LIGHTS; i++) {\n    v_posLightSpace[i] = cc_shadow_lightViewProjMatrix[i] * vec4(worldPos, 1.0);\n    v_depth[i] = (v_posLightSpace[i].z + cc_shadow_info[i].x) / (cc_shadow_info[i].x + cc_shadow_info[i].y);\n  }\n  #endif\n}\nuniform vec2 mainTiling;\nuniform vec2 mainOffset;\n#if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE || USE_SPECULAR_TEXTURE || USE_NORMAL_TEXTURE)\n  varying mediump vec2 v_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if USE_NORMAL_TEXTURE\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\nvarying vec3 v_worldNormal;\nvarying vec3 v_worldPos;\nvarying vec3 v_viewDirection;\nvarying vec4 v_position;\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  vec4 position = In.position;\n  v_worldNormal = normalize((cc_matWorldIT * vec4(In.normal, 0)).xyz);\n  v_worldPos = (cc_matWorld * position).xyz;\n  v_viewDirection = normalize(cc_cameraPos.xyz - v_worldPos);\n  #if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || USE_EMISSIVE_TEXTURE || USE_SPECULAR_TEXTURE || USE_NORMAL_TEXTURE)\n    v_uv0 = In.uv * mainTiling + mainOffset;\n  #endif\n  #if CC_USE_ATTRIBUTE_COLOR\n    v_color = In.color;\n  #endif\n  #if USE_NORMAL_TEXTURE\n    v_tangent = normalize((cc_matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_worldNormal, v_tangent) * In.tangent.w;\n  #endif\n  CCShadowInput(v_worldPos);\n  v_position = In.position;\n  gl_Position = cc_matViewProj * cc_matWorld * position;\n}","frag":"\nprecision highp float;\nvec4 CCFragOutput (vec4 color) {\n  #if OUTPUT_TO_GAMMA\n    color.rgb = sqrt(color.rgb);\n  #endif\n\treturn color;\n}\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform lowp vec4 diffuseColor;\nuniform lowp vec4 specularColor;\nuniform lowp vec4 emissiveColor;\nuniform float glossiness;\nuniform vec4 fog_color;\nuniform float fog_distance;\n#if USE_DIFFUSE_TEXTURE\n  uniform sampler2D diffuseTexture;\n#endif\n#if USE_SPECULAR && USE_SPECULAR_TEXTURE\n  uniform sampler2D specularTexture;\n#endif\n#if USE_EMISSIVE && USE_EMISSIVE_TEXTURE\n  uniform sampler2D emissiveTexture;\n#endif\n#if USE_NORMAL_TEXTURE\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalTexture;\n#endif\nvarying vec3 v_worldNormal;\nvarying vec3 v_worldPos;\nvarying vec3 v_viewDirection;\n#if CC_USE_ATTRIBUTE_UV0 && (USE_DIFFUSE_TEXTURE || (USE_EMISSIVE && USE_EMISSIVE_TEXTURE) || (USE_SPECULAR && USE_SPECULAR_TEXTURE) || USE_NORMAL_TEXTURE)\n  varying mediump vec2 v_uv0;\n#endif\n#if CC_USE_ATTRIBUTE_COLOR\n  varying lowp vec4 v_color;\n#endif\nvarying vec4 v_position;\n#if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n  uniform vec4 cc_shadow_info[2];\n  #if CC_NUM_SHADOW_LIGHTS > 0\n    uniform sampler2D cc_shadow_map_0;\n  #endif\n  #if CC_NUM_SHADOW_LIGHTS > 1\n    uniform sampler2D cc_shadow_map_1;\n  #endif\n  varying vec4 v_posLightSpace[2];\n  varying float v_depth[2];\n#endif\nfloat unpackRGBAToDepth(vec4 color) {\n  return dot(color, vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n}\nfloat getDepth(sampler2D shadowMap, vec2 shadowUV) {\n    return unpackRGBAToDepth(texture2D(shadowMap, shadowUV));\n}\nfloat computeFallOff(float shadow, vec2 coords, float frustumEdgeFalloff) {\n  return shadow;\n}\nfloat shadowSimple(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness) {\n  float closestDepth = getDepth(shadowMap, shadowUV);\n  return currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n}\nfloat shadowPCF3X3(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness, float shadowSize) {\n  float shadow = 0.0;\n  for (int x = -1; x <= 1; ++x) {\n    for (int y = -1; y <= 1; ++y) {\n      float closestDepth = getDepth(shadowMap, shadowUV + vec2(x, y) * 1.0/shadowSize);\n      shadow += currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n    }\n  }\n  shadow /= 9.0;\n  return shadow;\n}\nfloat shadowPCF5X5(sampler2D shadowMap, vec2 shadowUV, float currentDepth, float darkness, float shadowSize) {\n  float shadow = 0.0;\n  for (int x = -2; x <= 2; ++x) {\n    for (int y = -2; y <= 2; ++y) {\n      float closestDepth = getDepth(shadowMap, shadowUV + vec2(x, y) * 1.0/shadowSize);\n      shadow += currentDepth > closestDepth  ? 1.0 - darkness : 1.0;\n    }\n  }\n  shadow /= 25.0;\n  return shadow;\n}\n#if CC_NUM_LIGHTS > 0\nuniform vec4 cc_lightPositionAndRange[4];\nuniform vec4 cc_lightDirection[4];\nuniform vec4 cc_lightColor[4];\n#endif\nstruct LightInfo {\n  vec3 lightDir;\n  vec3 radiance;\n  vec4 lightColor;\n};\nLightInfo computeDirectionalLighting(\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  ret.lightDir = -normalize(lightDirection.xyz);\n  ret.radiance = lightColor.rgb;\n  ret.lightColor = lightColor;\n  return ret;\n}\nLightInfo computePointLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  ret.lightDir = normalize(lightDir);\n  ret.radiance = lightColor.rgb * attenuation;\n  ret.lightColor = lightColor;\n  return ret;\n}\nLightInfo computeSpotLighting(\n  vec3 worldPosition,\n  vec4 lightPositionAndRange,\n  vec4 lightDirection,\n  vec4 lightColor\n) {\n  LightInfo ret;\n  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;\n  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);\n  lightDir = normalize(lightDir);\n  float cosConeAngle = max(0., dot(lightDirection.xyz, -lightDir));\n  cosConeAngle = cosConeAngle < lightDirection.w ? 0. : cosConeAngle;\n  cosConeAngle = pow(cosConeAngle, lightColor.w);\n  ret.lightDir = lightDir;\n  ret.radiance = lightColor.rgb * attenuation * cosConeAngle;\n  ret.lightColor = lightColor;\n  return ret;\n}\nstruct Lighting {\n  vec3 diffuse;\n  vec3 specular;\n};\nstruct PhongSurface {\n  vec3 diffuse;\n  vec3 emissive;\n  vec3 specular;\n  float opacity;\n  float glossiness;\n  vec3 position;\n  vec3 normal;\n  vec3 viewDirection;\n};\nLighting brdf (PhongSurface s, LightInfo info) {\n  Lighting result;\n  float ndh = 0.0;\n  vec3 halfDir = normalize(s.viewDirection + info.lightDir);\n  float NdotH = max(0.0, dot(s.normal, halfDir));\n  NdotH = pow(NdotH, max(1.0, s.glossiness * 128.0));\n  result.diffuse = info.radiance * max(0.0, dot(s.normal, info.lightDir));\n  result.specular = info.radiance * NdotH;\n  return result;\n}\nvec4 composePhongShading (Lighting lighting, PhongSurface s) {\n  vec4 o = vec4(0.0, 0.0, 0.0, 1.0);\n  o.rgb = lighting.diffuse * s.diffuse;\n  #if USE_EMISSIVE\n    o.rgb += s.emissive;\n  #endif\n  #if USE_SPECULAR\n    o.rgb += lighting.specular * s.specular;\n  #endif\n  o.a = s.opacity;\n  return o;\n}\nvec3 ambient(PhongSurface s, vec4 ambientColor) {\n  return s.diffuse * ambientColor.rgb;\n}\nvec4 CCPhongShading (in PhongSurface s) {\n  Lighting result;\n  result.diffuse = vec3(0, 0, 0);\n  result.specular = vec3(0, 0, 0);\n  #if CC_NUM_LIGHTS > 0\n    #if CC_LIGHT_0_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[0]);\n    #else\n      LightInfo info0;\n      #if CC_LIGHT_0_TYPE == 0\n        info0 = computeDirectionalLighting(cc_lightDirection[0], cc_lightColor[0]);\n      #elif CC_LIGHT_0_TYPE == 1\n        info0 = computePointLighting(s.position, cc_lightPositionAndRange[0], cc_lightColor[0]);\n      #elif CC_LIGHT_0_TYPE == 2\n        info0 = computeSpotLighting(s.position, cc_lightPositionAndRange[0], cc_lightDirection[0], cc_lightColor[0]);\n      #endif\n      Lighting result0 = brdf(s, info0);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 0\n    float shadow_0 = 1.0;\n    vec2 projCoords0 = v_posLightSpace[0].xy / v_posLightSpace[0].w;\n    vec2 shadowUV0 = projCoords0 * 0.5 + vec2(0.5);\n    if (shadowUV0.x >= 0.0 && shadowUV0.x <= 1.0 && shadowUV0.y >= 0.0 && shadowUV0.y <= 1.0) {\n      float currentDepth0 = clamp(v_depth[0], 0.0, 1.0);\n      #if CC_SHADOW_0_TYPE == 3\n        shadow_0 = shadowPCF3X3(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w, cc_shadow_info[0].z);\n      #elif CC_SHADOW_0_TYPE == 4\n        shadow_0 = shadowPCF5X5(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w, cc_shadow_info[0].z);\n      #else\n        shadow_0 = shadowSimple(cc_shadow_map_0, shadowUV0, currentDepth0, cc_shadow_info[0].w);\n      #endif\n      shadow_0 = computeFallOff(shadow_0, projCoords0, 0.0);\n    }\n    result0.diffuse *= shadow_0;\n    result0.specular *= shadow_0;\n  #endif\n      result.diffuse += result0.diffuse;\n      result.specular += result0.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 1\n    #if CC_LIGHT_1_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[1]);\n    #else\n      LightInfo info1;\n      #if CC_LIGHT_1_TYPE == 0\n        info1 = computeDirectionalLighting(cc_lightDirection[1], cc_lightColor[1]);\n      #elif CC_LIGHT_1_TYPE == 1\n        info1 = computePointLighting(s.position, cc_lightPositionAndRange[1], cc_lightColor[1]);\n      #elif CC_LIGHT_1_TYPE == 2\n        info1 = computeSpotLighting(s.position, cc_lightPositionAndRange[1], cc_lightDirection[1], cc_lightColor[1]);\n      #endif\n      Lighting result1 = brdf(s, info1);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 1\n    float shadow_1 = 1.0;\n    vec2 projCoords1 = v_posLightSpace[1].xy / v_posLightSpace[1].w;\n    vec2 shadowUV1 = projCoords1 * 0.5 + vec2(0.5);\n    if (shadowUV1.x >= 0.0 && shadowUV1.x <= 1.0 && shadowUV1.y >= 0.0 && shadowUV1.y <= 1.0) {\n      float currentDepth1 = clamp(v_depth[1], 0.0, 1.0);\n      #if CC_SHADOW_1_TYPE == 3\n        shadow_1 = shadowPCF3X3(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w, cc_shadow_info[1].z);\n      #elif CC_SHADOW_1_TYPE == 4\n        shadow_1 = shadowPCF5X5(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w, cc_shadow_info[1].z);\n      #else\n        shadow_1 = shadowSimple(cc_shadow_map_1, shadowUV1, currentDepth1, cc_shadow_info[1].w);\n      #endif\n      shadow_1 = computeFallOff(shadow_1, projCoords1, 0.0);\n    }\n    result1.diffuse *= shadow_1;\n    result1.specular *= shadow_1;\n  #endif\n      result.diffuse += result1.diffuse;\n      result.specular += result1.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 2\n    #if CC_LIGHT_2_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[2]);\n    #else\n      LightInfo info2;\n      #if CC_LIGHT_2_TYPE == 0\n        info2 = computeDirectionalLighting(cc_lightDirection[2], cc_lightColor[2]);\n      #elif CC_LIGHT_2_TYPE == 1\n        info2 = computePointLighting(s.position, cc_lightPositionAndRange[2], cc_lightColor[2]);\n      #elif CC_LIGHT_2_TYPE == 2\n        info2 = computeSpotLighting(s.position, cc_lightPositionAndRange[2], cc_lightDirection[2], cc_lightColor[2]);\n      #endif\n      Lighting result2 = brdf(s, info2);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 2\n    float shadow_2 = 1.0;\n    vec2 projCoords2 = v_posLightSpace[2].xy / v_posLightSpace[2].w;\n    vec2 shadowUV2 = projCoords2 * 0.5 + vec2(0.5);\n    if (shadowUV2.x >= 0.0 && shadowUV2.x <= 1.0 && shadowUV2.y >= 0.0 && shadowUV2.y <= 1.0) {\n      float currentDepth2 = clamp(v_depth[2], 0.0, 1.0);\n      #if CC_SHADOW_2_TYPE == 3\n        shadow_2 = shadowPCF3X3(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w, cc_shadow_info[2].z);\n      #elif CC_SHADOW_2_TYPE == 4\n        shadow_2 = shadowPCF5X5(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w, cc_shadow_info[2].z);\n      #else\n        shadow_2 = shadowSimple(cc_shadow_map_2, shadowUV2, currentDepth2, cc_shadow_info[2].w);\n      #endif\n      shadow_2 = computeFallOff(shadow_2, projCoords2, 0.0);\n    }\n    result2.diffuse *= shadow_2;\n    result2.specular *= shadow_2;\n  #endif\n      result.diffuse += result2.diffuse;\n      result.specular += result2.specular;\n    #endif\n  #endif\n  #if CC_NUM_LIGHTS > 3\n    #if CC_LIGHT_3_TYPE == 3\n      result.diffuse += ambient(s, cc_lightColor[3]);\n    #else\n      LightInfo info3;\n      #if CC_LIGHT_3_TYPE == 0\n        info3 = computeDirectionalLighting(cc_lightDirection[3], cc_lightColor[3]);\n      #elif CC_LIGHT_3_TYPE == 1\n        info3 = computePointLighting(s.position, cc_lightPositionAndRange[3], cc_lightColor[3]);\n      #elif CC_LIGHT_3_TYPE == 2\n        info3 = computeSpotLighting(s.position, cc_lightPositionAndRange[3], cc_lightDirection[3], cc_lightColor[3]);\n      #endif\n      Lighting result3 = brdf(s, info3);\n  #if CC_USE_SHADOW_MAP && CC_NUM_SHADOW_LIGHTS > 3\n    float shadow_3 = 1.0;\n    vec2 projCoords3 = v_posLightSpace[3].xy / v_posLightSpace[3].w;\n    vec2 shadowUV3 = projCoords3 * 0.5 + vec2(0.5);\n    if (shadowUV3.x >= 0.0 && shadowUV3.x <= 1.0 && shadowUV3.y >= 0.0 && shadowUV3.y <= 1.0) {\n      float currentDepth3 = clamp(v_depth[3], 0.0, 1.0);\n      #if CC_SHADOW_3_TYPE == 3\n        shadow_3 = shadowPCF3X3(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w, cc_shadow_info[3].z);\n      #elif CC_SHADOW_3_TYPE == 4\n        shadow_3 = shadowPCF5X5(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w, cc_shadow_info[3].z);\n      #else\n        shadow_3 = shadowSimple(cc_shadow_map_3, shadowUV3, currentDepth3, cc_shadow_info[3].w);\n      #endif\n      shadow_3 = computeFallOff(shadow_3, projCoords3, 0.0);\n    }\n    result3.diffuse *= shadow_3;\n    result3.specular *= shadow_3;\n  #endif\n      result.diffuse += result3.diffuse;\n      result.specular += result3.specular;\n    #endif\n  #endif\n  return composePhongShading(result, s);\n}\nvoid surf (out PhongSurface s) {\n  vec4 diffuse = vec4(1, 1, 1, 1);\n  #if CC_USE_ATTRIBUTE_COLOR\n    diffuse *= v_color;\n  #endif\n  diffuse *= diffuseColor;\n  #if USE_DIFFUSE_TEXTURE\n  vec4 diffuseTexture_tmp = texture2D(diffuseTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_diffuseTexture\n      diffuseTexture_tmp.a *= texture2D(diffuseTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    diffuse.rgb *= (diffuseTexture_tmp.rgb * diffuseTexture_tmp.rgb);\n    diffuse.a *= diffuseTexture_tmp.a;\n  #else\n    diffuse *= diffuseTexture_tmp;\n  #endif\n  #endif\n  ALPHA_TEST(diffuse);\n  s.diffuse = diffuse.rgb;\n  s.opacity = diffuse.a;\n  #if USE_EMISSIVE\n    s.emissive = emissiveColor.rgb;\n    #if USE_EMISSIVE_TEXTURE\n  vec4 emissiveTexture_tmp = texture2D(emissiveTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_emissiveTexture\n      emissiveTexture_tmp.a *= texture2D(emissiveTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    s.emissive.rgb *= (emissiveTexture_tmp.rgb * emissiveTexture_tmp.rgb);\n  #else\n    s.emissive.rgb *= emissiveTexture_tmp.rgb;\n  #endif\n    #endif\n  #endif\n  #if USE_SPECULAR\n    s.specular = specularColor.rgb;\n    #if USE_SPECULAR_TEXTURE\n  vec4 specularTexture_tmp = texture2D(specularTexture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_specularTexture\n      specularTexture_tmp.a *= texture2D(specularTexture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    s.specular.rgb *= (specularTexture_tmp.rgb * specularTexture_tmp.rgb);\n  #else\n    s.specular.rgb *= specularTexture_tmp.rgb;\n  #endif\n    #endif\n  #endif\n  s.normal = v_worldNormal;\n  #if USE_NORMAL_TEXTURE\n    vec3 nmmp = texture2D(normalTexture, v_uv0).xyz - vec3(0.5);\n    s.normal =\n      nmmp.x * normalize(v_tangent) +\n      nmmp.y * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n    s.normal = normalize(s.normal);\n  #endif\n  s.position = v_worldPos;\n  s.viewDirection = v_viewDirection;\n  s.glossiness = glossiness;\n}\nvoid main () {\n  PhongSurface s;\n  surf(s);\n  vec4 color = CCPhongShading(s);\n  float fog_ratio =  1.0-exp(-gl_FragCoord.w*fog_distance);\n  gl_FragColor = CCFragOutput(color) * fog_ratio + (1.0-fog_ratio) * fog_color;\n}"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CC_SHADOW","defines":["CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"]},{"name":"CCLIGHTS","defines":["CC_NUM_LIGHTS"]}],"samplers":[{"name":"cc_shadow_map_0","defines":["CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"]},{"name":"cc_shadow_map_1","defines":["CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"]}]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_JOINTS_TEXTRUE","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"CC_JOINTS_TEXTURE_FLOAT32","type":"boolean","defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"CC_USE_ATTRIBUTE_UV0","type":"boolean","defines":[]},{"name":"CC_USE_ATTRIBUTE_COLOR","type":"boolean","defines":[]},{"name":"CC_USE_ATTRIBUTE_NORMAL","type":"boolean","defines":[]},{"name":"CC_USE_ATTRIBUTE_TANGENT","type":"boolean","defines":[]},{"name":"CC_USE_SHADOW_MAP","type":"boolean","defines":[]},{"name":"CC_NUM_SHADOW_LIGHTS","type":"number","defines":["CC_USE_SHADOW_MAP"],"range":[0,3]},{"name":"USE_DIFFUSE_TEXTURE","type":"boolean","defines":[]},{"name":"USE_NORMAL_TEXTURE","type":"boolean","defines":[]},{"name":"OUTPUT_TO_GAMMA","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"USE_SPECULAR","type":"boolean","defines":[]},{"name":"USE_SPECULAR_TEXTURE","type":"boolean","defines":["USE_SPECULAR"]},{"name":"USE_EMISSIVE","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_TEXTURE","type":"boolean","defines":["USE_EMISSIVE"]},{"name":"CC_NUM_LIGHTS","type":"number","defines":[],"range":[0,3]},{"name":"CC_LIGHT_0_TYPE","type":"number","defines":["CC_NUM_LIGHTS"],"range":[0,3]},{"name":"CC_SHADOW_0_TYPE","type":"number","defines":["CC_NUM_LIGHTS","CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"],"range":[0,3]},{"name":"CC_LIGHT_1_TYPE","type":"number","defines":["CC_NUM_LIGHTS"],"range":[0,3]},{"name":"CC_SHADOW_1_TYPE","type":"number","defines":["CC_NUM_LIGHTS","CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"],"range":[0,3]},{"name":"CC_LIGHT_2_TYPE","type":"number","defines":["CC_NUM_LIGHTS"],"range":[0,3]},{"name":"CC_SHADOW_2_TYPE","type":"number","defines":["CC_NUM_LIGHTS","CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"],"range":[0,3]},{"name":"CC_LIGHT_3_TYPE","type":"number","defines":["CC_NUM_LIGHTS"],"range":[0,3]},{"name":"CC_SHADOW_3_TYPE","type":"number","defines":["CC_NUM_LIGHTS","CC_USE_SHADOW_MAP","CC_NUM_SHADOW_LIGHTS"],"range":[0,3]},{"name":"CC_USE_ALPHA_ATLAS_diffuseTexture","type":"boolean","defines":["USE_DIFFUSE_TEXTURE"]},{"name":"INPUT_IS_GAMMA","type":"boolean","defines":["USE_DIFFUSE_TEXTURE"]},{"name":"CC_USE_ALPHA_ATLAS_emissiveTexture","type":"boolean","defines":["USE_EMISSIVE","USE_EMISSIVE_TEXTURE"]},{"name":"CC_USE_ALPHA_ATLAS_specularTexture","type":"boolean","defines":["USE_SPECULAR","USE_SPECULAR_TEXTURE"]}],"blocks":[{"name":"SKINNING","binding":0,"members":[{"name":"jointsTextureSize","type":14,"count":1}],"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"JOINT_MATRIX","binding":1,"members":[{"name":"jointMatrices","type":26,"count":50}],"defines":["CC_USE_SKINNING"]},{"name":"MAIN_TILING","binding":2,"members":[{"name":"mainTiling","type":14,"count":1},{"name":"mainOffset","type":14,"count":1}],"defines":[]},{"name":"ALPHA_TEST","binding":3,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]},{"name":"PhongFrag","binding":4,"members":[{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissiveColor","type":16,"count":1},{"name":"glossiness","type":13,"count":1}],"defines":[]},{"name":"Fog","binding":5,"members":[{"name":"fog_color","type":16,"count":1},{"name":"fog_distance","type":13,"count":1}],"defines":[]}],"samplers":[{"name":"jointsTexture","type":29,"count":1,"binding":30,"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"diffuseTexture","type":29,"count":1,"binding":31,"defines":["USE_DIFFUSE_TEXTURE"]},{"name":"specularTexture","type":29,"count":1,"binding":32,"defines":["USE_SPECULAR","USE_SPECULAR_TEXTURE"]},{"name":"emissiveTexture","type":29,"count":1,"binding":33,"defines":["USE_EMISSIVE","USE_EMISSIVE_TEXTURE"]},{"name":"normalTexture","type":29,"count":1,"binding":34,"defines":["USE_NORMAL_TEXTURE"]}]},{"hash":1165371292,"record":null,"name":"fog|shadow-map-vs|shadow-map-fs","glsl3":{"vert":"\nprecision highp float;\nin vec3 a_position;\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nuniform CC_SHADOW_MAP {\n  mat4  cc_shadow_map_lightViewProjMatrix;\n  vec4  cc_shadow_map_info;\n  float cc_shadow_map_bias;\n};\nout float v_depth;\n#if CC_USE_SKINNING\n  in vec4 a_weights;\n  in vec4 a_joints;\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform SKINNING {\n      vec2 jointsTextureSize;\n    };\n    uniform sampler2D jointsTexture;\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = texture(jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture(jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture(jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture(jointsTexture, vec2(dx * (x + 3.5), y));\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture(jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture(jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform JOINT_MATRIX {\n      mat4 jointMatrices[50];\n    };\n    mat4 getBoneMatrix(const in float i) {\n      return jointMatrices[int(i)];\n    }\n  #endif\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\nvoid SKIN_VERTEX(inout vec4 a1) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n  #endif\n}\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n  #endif\n}\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n    a3 = m * a3;\n  #endif\n}\nvoid main () {\n  vec4 position = vec4(a_position, 1);\n  SKIN_VERTEX(position);\n  gl_Position = cc_shadow_map_lightViewProjMatrix * cc_matWorld * position;\n  v_depth = ((gl_Position.z + cc_shadow_map_info.x) / (cc_shadow_map_info.x + cc_shadow_map_info.y)) + cc_shadow_map_bias;\n}","frag":"\nprecision highp float;\nin float v_depth;\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nvoid main () {\n    gl_FragColor = packDepthToRGBA(v_depth);\n}"},"glsl1":{"vert":"\nprecision highp float;\nattribute vec3 a_position;\nuniform mat4 cc_matWorld;\nuniform mat4 cc_shadow_map_lightViewProjMatrix;\nuniform vec4 cc_shadow_map_info;\nuniform float cc_shadow_map_bias;\nvarying float v_depth;\n#if CC_USE_SKINNING\n  attribute vec4 a_weights;\n  attribute vec4 a_joints;\n  #if CC_USE_JOINTS_TEXTRUE\n    uniform vec2 jointsTextureSize;\n    uniform sampler2D jointsTexture;\n    #if CC_JOINTS_TEXTURE_FLOAT32\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 4.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = texture2D(jointsTexture, vec2(dx * (x + 0.5), y));\n        vec4 v2 = texture2D(jointsTexture, vec2(dx * (x + 1.5), y));\n        vec4 v3 = texture2D(jointsTexture, vec2(dx * (x + 2.5), y));\n        vec4 v4 = texture2D(jointsTexture, vec2(dx * (x + 3.5), y));\n        return mat4(v1, v2, v3, v4);\n      }\n    #else\n      float decode32(vec4 rgba) {\n        float Sign = 1.0 - step(128.0, rgba[0]) * 2.0;\n        float Exponent = 2.0 * mod(rgba[0], 128.0) + step(128.0, rgba[1]) - 127.0;\n        float Mantissa = mod(rgba[1], 128.0) * 65536.0 + rgba[2] * 256.0 + rgba[3] + 8388608.0;\n        return Sign * exp2(Exponent - 23.0) * Mantissa;\n      }\n      vec4 decodevec4 (vec4 x, vec4 y, vec4 z, vec4 w) {\n        return vec4(\n          decode32(x.wzyx * 255.0),\n          decode32(y.wzyx * 255.0),\n          decode32(z.wzyx * 255.0),\n          decode32(w.wzyx * 255.0)\n        );\n      }\n      vec4 decodevec4 (float dx, float x, float y) {\n        return decodevec4(\n          texture2D(jointsTexture, vec2(dx * (x + 0.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 1.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 2.5), y)),\n          texture2D(jointsTexture, vec2(dx * (x + 3.5), y))\n        );\n      }\n      mat4 getBoneMatrix(const in float i) {\n        float width = jointsTextureSize.x;\n        float height = jointsTextureSize.y;\n        float j = i * 16.0;\n        float x = mod(j, width);\n        float y = floor(j / width);\n        float dx = 1.0 / width;\n        float dy = 1.0 / height;\n        y = dy * (y + 0.5);\n        vec4 v1 = decodevec4(dx, x,       y);\n        vec4 v2 = decodevec4(dx, x+4.0,   y);\n        vec4 v3 = decodevec4(dx, x+8.0,   y);\n        vec4 v4 = decodevec4(dx, x+12.0,  y);\n        return mat4(v1, v2, v3, v4);\n      }\n    #endif\n  #else\n    uniform mat4 jointMatrices[50];\n    mat4 getBoneMatrix(const in float i) {\n      return jointMatrices[int(i)];\n    }\n  #endif\n    mat4 skinMatrix() {\n      return\n        getBoneMatrix(a_joints.x) * a_weights.x +\n        getBoneMatrix(a_joints.y) * a_weights.y +\n        getBoneMatrix(a_joints.z) * a_weights.z +\n        getBoneMatrix(a_joints.w) * a_weights.w\n        ;\n    }\n#endif\nvoid SKIN_VERTEX(inout vec4 a1) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n  #endif\n}\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n  #endif\n}\nvoid SKIN_VERTEX(inout vec4 a1, inout vec4 a2, inout vec4 a3) {\n  #if CC_USE_SKINNING\n    mat4 m = skinMatrix();\n    a1 = m * a1;\n    a2 = m * a2;\n    a3 = m * a3;\n  #endif\n}\nvoid main () {\n  vec4 position = vec4(a_position, 1);\n  SKIN_VERTEX(position);\n  gl_Position = cc_shadow_map_lightViewProjMatrix * cc_matWorld * position;\n  v_depth = ((gl_Position.z + cc_shadow_map_info.x) / (cc_shadow_map_info.x + cc_shadow_map_info.y)) + cc_shadow_map_bias;\n}","frag":"\nprecision highp float;\nvarying float v_depth;\nvec4 packDepthToRGBA(float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nvoid main () {\n    gl_FragColor = packDepthToRGBA(v_depth);\n}"},"builtins":{"globals":{"blocks":[{"name":"CC_SHADOW_MAP","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_JOINTS_TEXTRUE","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"CC_JOINTS_TEXTURE_FLOAT32","type":"boolean","defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]}],"blocks":[{"name":"SKINNING","binding":0,"members":[{"name":"jointsTextureSize","type":14,"count":1}],"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]},{"name":"JOINT_MATRIX","binding":1,"members":[{"name":"jointMatrices","type":26,"count":50}],"defines":["CC_USE_SKINNING"]}],"samplers":[{"name":"jointsTexture","type":29,"count":1,"binding":30,"defines":["CC_USE_SKINNING","CC_USE_JOINTS_TEXTRUE"]}]}],[{"passes":[{"name":"phong","program":"fog|vs|fs","rasterizerState":{"cullMode":1029},"depthStencilState":{"depthTest":true,"depthWrite":true},"properties":{"fog_color":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"fog_distance":{"type":13,"value":[1000]},"alphaThreshold":{"type":13,"value":[0.5]},"mainTiling":{"type":14,"value":[1,1]},"mainOffset":{"type":14,"value":[0,0]},"diffuseColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"diffuseTexture":{"value":"white","type":29},"specularColor":{"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"specularTexture":{"value":"white","type":29},"emissiveColor":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveTexture":{"value":"white","type":29},"glossiness":{"type":13,"value":[10]},"normalTexture":{"value":"white","type":29}}},{"name":"shadowcast","stage":"shadowcast","program":"fog|shadow-map-vs|shadow-map-fs","rasterizerState":{"cullMode":1029},"depthStencilState":{"depthTest":true,"depthWrite":true}}]}]]],0,0,[],[],[]],[[{"name":"Sound","rect":[0,0,512,512],"offset":[0,0],"originalSize":[512,512],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[114]],[[[36,"windAudio",".mp3",7.975125],-1],0,0,[],[],[]],[[{"name":"leaderboardGreyscale","rect":[4,4,504,508],"offset":[0,-2],"originalSize":[512,512],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[115]],[[[12,".bin",[[13,24,[14,768],[[3,"a_normal",5126,3],[3,"a_position",5126,3],[3,"a_uv0",5126,2]]]],[[16,[0],[15,768,48]]],[1,-0.00649519078433514,-0.00600000005215406,-0.00519615225493908],[1,0.00649519078433514,0.00599999818950891,0.00519615318626165]],-1],0,0,[],[],[]],[[{"name":"vector headphones","rect":[49,312,958,336],"offset":[16,32],"originalSize":[1024,1024],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[116]],[[{"name":"leaderboardButton","rect":[4,4,504,508],"offset":[0,-2],"originalSize":[512,512],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[117]],[[[88,"Berlin Sans FB Demi Bold","Berlin Sans FB Demi Bold.ttf"],-1],0,0,[],[],[]],[[[36,"RainEffect",".mp3",15.038063],-1],0,0,[],[],[]],[[[49,"Obstacle4"],[65,"Obstacle4",true,[-5,-6,-7,-8,-9],[[33,true,-2,[1,0,0,0.3],[1,2.4,2.6,0.1]],[73,-4,-3,2]],[19,-1],[0,0,371.575,0,0,0,1,36,36,36]],[45,"Obstacle_PENTAGON",true,1,[[5,-10,[0],1]],[0,"Obstacle_PENTAGON",1],[0,0,0,-0.7071068286895765,0,0,0.7071067336835153,100,100,100],[1,-90.00000769819565,0,0]],[28,"Colliders",true,2,1,[[7,-11,[1,0,1.6,-0.1],[1,2.763,0.418,0.35]]],[0,"8e3zZ/h2pJTY/g5rOjA/v9",1]],[28,"Colliders copy",true,2,1,[[7,-12,[1,0,-1.4,-0.1],[1,2.563,0.318,0.35]]],[0,"7bZxcLQYpFE67brVDrJ/N/",1]],[28,"Colliders copy",true,2,1,[[7,-13,[1,1.46,0,-0.1],[1,0.4,3,0.35]]],[0,"f9O6oNGKJGaJEZ/GsAXiTk",1]],[28,"Colliders copy",true,2,1,[[7,-14,[1,-1.46,0,-0.1],[1,0.4,1.5,0.35]]],[0,"ad+lM8HNBIjK+EUWKoQ7MD",1]]],0,[0,7,1,0,0,1,0,14,2,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,-5,6,0,0,2,0,0,3,0,0,4,0,0,5,0,0,6,0,16,1,14],[0,0,0],[-1,4,15],[24,118,12]],[[[22,"moonMaterial",[{},"0",11,[{"defines":{"USE_DIFFUSE_TEXTURE":true}},"props",11,[{},"diffuseTexture",6,0]]]]],0,0,[0,0],[11,6],[119,13]],[[[22,"mountainMaterial",[{},"0",11,[{"defines":{"USE_ALPHA_TEST":false,"USE_DIFFUSE_TEXTURE":true}},"props",11,[{"fog_distance":2000},"diffuseTexture",6,0]]]]],0,0,[0,0],[11,6],[120,15]],[[[12,".bin",[[13,482,[14,15424],[[3,"a_normal",5126,3],[3,"a_position",5126,3],[3,"a_uv0",5126,2]]]],[[16,[0],[15,15424,5760]]],[1,-0.0516407899558544,-0.0516408085823059,-0.0516408421099186],[1,0.0516408272087574,0.0516407750546932,0.0516408421099186]],-1],0,0,[],[],[]],[[{"name":"FixedShareHover","rect":[0,0,512,512],"offset":[0,0],"originalSize":[512,512],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[121]],[[{"name":"gameOverUI","rect":[129,0,766,1024],"offset":[0,0],"originalSize":[1024,1024],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[122]],[[{"name":"FixedShare","rect":[0,0,512,512],"offset":[0,0],"originalSize":[512,512],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[123]],[[{"name":"MusicMute","rect":[0,0,512,512],"offset":[0,0],"originalSize":[512,512],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[124]],[[{"name":"Icon","rect":[52,51,918,396],"offset":[-1,7],"originalSize":[1024,512],"capInsets":[0,0,0,0]}],[1],0,[0],[3],[125]],[[{"name":"default_btn_pressed","rect":[0,0,40,40],"offset":[0,0],"originalSize":[40,40],"capInsets":[12,12,12,12]}],[1],0,[0],[3],[126]],[[[12,".bin",[[13,482,[14,15424],[[3,"a_normal",5126,3],[3,"a_position",5126,3],[3,"a_uv0",5126,2]]]],[[16,[0],[15,15424,5760]]],[1,-0.138073444366455,-0.139211177825928,-0.00311562255956233],[1,0.140248134732246,0.139110460877419,-0.0000429180254286621]],-1],0,0,[],[],[]],[[{"name":"default_btn_normal","rect":[0,0,40,40],"offset":[0,0],"originalSize":[40,40],"capInsets":[12,12,12,12]}],[1],0,[0],[3],[127]],[[[89,[{},"0",11,[{"defines":{"USE_DIFFUSE_TEXTURE":true,"OUTPUT_TO_GAMMA":false,"INPUT_IS_GAMMA":false}},"props",11,[{"glossiness":1},"diffuseColor",8,[4,4294967295],"emissiveColor",8,[4,4278190080],"diffuseTexture",6,0]]]]],0,0,[0,0],[11,6],[36,128]],[[[88,"Gill Sans Ultra Bold","Gill Sans Ultra Bold.ttf"],-1],0,0,[],[],[]],[[[22,"bgMat",[{},"0",11,[{"defines":{"USE_DIFFUSE_TEXTURE":true}},"props",11,[{},"diffuseColor",8,[4,4278297855],"diffuseTexture",6,0]]]]],0,0,[0,0],[11,6],[129,13]],[[{"name":"Third","rect":[521,3,512,390],"offset":[0,0],"originalSize":[512,512],"rotated":1,"capInsets":[0,0,0,0]}],[1],0,[0],[3],[8]],[[[49,"Obstacle1"],[40,"Obstacle1",true,2,[-5,-6,-7,-8,-9],[[33,true,-2,[1,0,0,0.4],[1,2.7,2.7,0.1]],[47,false,-4,-3,2]],[19,-1],[0,0,50,0,0,0,1,6,6,6]],[44,"Obstacle_SQUIRE",true,2,1,[[5,-10,[0],1]],[0,"Obstacle_SQUIRE",1],[0,0,0,-0.7071068286895765,0,0,0.7071067336835153,100,100,100],[1,-90.00000769819565,0,0]],[17,"Colliders",true,1,[[7,-11,[1,0,1.3,-0.1],[1,3.063,0.418,0.35]]],[0,"68ElFupglHAp+vcio6NhRt",1]],[17,"Colliders copy",true,1,[[7,-12,[1,0,-1.3,-0.1],[1,3.063,0.418,0.35]]],[0,"f502erahtOV6nCpLf5T+GZ",1]],[17,"Colliders copy",true,1,[[7,-13,[1,1.36,0,-0.1],[1,0.4,3,0.35]]],[0,"54MDEChWdJFIWa0psXgQ8u",1]],[17,"Colliders copy",true,1,[[7,-14,[1,-1.36,0,-0.1],[1,0.4,3,0.35]]],[0,"faDKM2ewRG8ZBz7z6Sq6QB",1]]],0,[0,7,1,0,0,1,0,14,2,0,0,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,-5,6,0,0,2,0,0,3,0,0,4,0,0,5,0,0,6,0,16,1,14],[0,0,0],[-1,4,15],[23,130,12]]]]